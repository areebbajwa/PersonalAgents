#!/usr/bin/env node

import { spawn } from 'child_process';
import { promises as fs } from 'fs';
import path from 'path';
import os from 'os';

const SESSION_SERVER_PORT = 3001;
const SESSION_PIDFILE = path.join(os.tmpdir(), 'selenium-session.pid');

// Use ~/PersonalAgents as per CLI design guide
const MAIN_REPO_PATH = path.join(os.homedir(), 'PersonalAgents');

// Check if session server is running
async function isSessionServerRunning() {
    try {
        const response = await fetch(`http://localhost:${SESSION_SERVER_PORT}/status`);
        return response.ok;
    } catch (e) {
        return false;
    }
}

// Start session server if not running
async function ensureSessionServer() {
    if (await isSessionServerRunning()) {
        return;
    }
    
    console.log('Starting session server...');
    
    // Use absolute path to session server in main repo
    const serverPath = path.join(MAIN_REPO_PATH, 'cli_tools', 'selenium-cli', 'session-server.mjs');
    
    // Check if session server exists
    try {
        await fs.access(serverPath);
    } catch (error) {
        console.error('Session server not found');
        console.error(`Please ensure ~/PersonalAgents symlink points to your PersonalAgents repository`);
        console.error(`Expected path: ${serverPath}`);
        process.exit(1);
    }
    
    const serverProcess = spawn('node', [serverPath], {
        detached: true,
        stdio: 'ignore'
    });
    
    serverProcess.unref();
    
    // Save PID
    await fs.writeFile(SESSION_PIDFILE, serverProcess.pid.toString());
    
    // Wait for server to start
    let attempts = 0;
    while (attempts < 20) {
        await new Promise(resolve => setTimeout(resolve, 1000));
        if (await isSessionServerRunning()) {
            console.log('✓ Session server started');
            return;
        }
        attempts++;
    }
    
    throw new Error('Failed to start session server');
}

// Make HTTP request to session server
async function makeRequest(endpoint, data = {}) {
    await ensureSessionServer();
    
    const response = await fetch(`http://localhost:${SESSION_SERVER_PORT}${endpoint}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    });
    
    return await response.json();
}

// Display action results
function displayActionResult(result) {
    if (result.url) {
        console.log(`URL: ${result.url}`);
    }
    if (result.title) {
        console.log(`Title: ${result.title}`);
    }
    if (result.screenshot) {
        console.log(`Screenshot: ${result.screenshot}`);
    }
    if (result.html) {
        console.log(`HTML: ${result.html}`);
    }
    if (result.htmlDiff) {
        console.log(`HTML Diff: ${result.htmlDiff.summary}`);
        
        // Show interactive elements even if hasDiff is false (for first page load)
        if (result.htmlDiff.newButtons && result.htmlDiff.newButtons.length > 0) {
            console.log(`Interactive Elements Found:`);
            // Limit to first 20 for readability
            const elementsToShow = result.htmlDiff.newButtons.slice(0, 20);
            elementsToShow.forEach((button, i) => {
                console.log(`  ${i + 1}. "${button.text}" (${button.tagName})`);
                if (button.selectors && button.selectors.length > 0) {
                    console.log(`     Selector: ${button.selectors[0]}`);
                    if (button.selectors.length > 1) {
                        console.log(`     Alt: ${button.selectors.slice(1).join(', ')}`);
                    }
                }
                if (button.href) console.log(`     Href: ${button.href}`);
                if (button.classes) console.log(`     Classes: ${button.classes}`);
                if (button.id) console.log(`     ID: ${button.id}`);
            });
            if (result.htmlDiff.newButtons.length > 20) {
                console.log(`  ... and ${result.htmlDiff.newButtons.length - 20} more`);
                console.log(`  (Use 'selenium-cli elements' to see complete list)`);
            }
        }
        
        if (result.htmlDiff.hasDiff) {
            
            if (result.htmlDiff.elementDiff !== 0) {
                console.log(`Element Count: ${result.htmlDiff.totalPreviousElements} → ${result.htmlDiff.totalCurrentElements} (${result.htmlDiff.elementDiff > 0 ? '+' : ''}${result.htmlDiff.elementDiff})`);
            }
        }
    }
    if (result.text) {
        console.log(`Text:`);
        console.log(result.text);
    }
}

// Main command handler
async function main() {
    const args = process.argv.slice(2);
    const command = args[0];
    
    // Show help if no arguments or help requested
    if (!command || command === 'help' || command === '-h' || command === '--help') {
        console.log('Selenium CLI - Browser automation tool');
        console.log('');
        console.log('Usage: selenium-cli <command> [options]');
        console.log('');
        console.log('Commands:');
        console.log('  navigate <url>              - Navigate to URL');
        console.log('  click <selector>            - Click element');
        console.log('  type <selector> <text>      - Type text');
        console.log('  screenshot                  - Take screenshot');
        console.log('  elements                    - List all interactive elements');
        console.log('  status                      - Check browser status');
        console.log('  close                       - Close browser');
        console.log('');
        console.log('Selectors:');
        console.log('  css=.class                  - CSS selector');
        console.log('  id=element-id               - ID selector');
        console.log('  xpath=//div[@class="x"]     - XPath selector');
        console.log('  name=field-name             - Name attribute');
        console.log('  class=class-name            - Class name');
        console.log('  tag=div                     - Tag name');
        console.log('');
        console.log('Examples:');
        console.log('  selenium-cli navigate https://example.com');
        console.log('  selenium-cli click "css=button.submit"');
        console.log('  selenium-cli type "id=search" "hello world"');
        console.log('  selenium-cli screenshot');
        return;
    }
    
    try {
        switch (command) {
            case 'navigate': {
                const url = args[1];
                if (!url) {
                    console.error('Usage: selenium-cli navigate <url>');
                    process.exit(1);
                }
                console.log(`Navigating to ${url}...`);
                
                const result = await makeRequest('/navigate', { url });
                if (result.success) {
                    console.log('✓ Navigation complete');
                    displayActionResult(result);
                } else {
                    console.error(`✗ Navigation failed: ${result.error}`);
                    // Still display page state on error for debugging
                    displayActionResult(result);
                    process.exit(1);
                }
                break;
            }
                
            case 'click': {
                const selector = args[1];
                if (!selector) {
                    console.error('Usage: selenium-cli click <selector>');
                    process.exit(1);
                }
                console.log(`Clicking ${selector}...`);
                
                const result = await makeRequest('/click', { selector });
                if (result.success) {
                    console.log('✓ Click complete');
                    displayActionResult(result);
                } else {
                    console.error(`✗ Click failed: ${result.error}`);
                    // Still display page state on error for debugging
                    displayActionResult(result);
                    process.exit(1);
                }
                break;
            }
                
            case 'type': {
                const selector = args[1];
                const text = args.slice(2).join(' ');
                if (!selector || !text) {
                    console.error('Usage: selenium-cli type <selector> <text>');
                    process.exit(1);
                }
                console.log(`Typing "${text}" into ${selector}...`);
                
                const result = await makeRequest('/type', { selector, text });
                if (result.success) {
                    console.log('✓ Type complete');
                    displayActionResult(result);
                } else {
                    console.error(`✗ Type failed: ${result.error}`);
                    // Still display page state on error for debugging
                    displayActionResult(result);
                    process.exit(1);
                }
                break;
            }
                
            case 'screenshot': {
                const result = await makeRequest('/screenshot');
                if (result.success) {
                    console.log(`✓ Screenshot saved: ${result.screenshot}`);
                } else {
                    console.error(`✗ Screenshot failed: ${result.error}`);
                    process.exit(1);
                }
                break;
            }
                
            case 'elements': {
                try {
                    const response = await fetch(`http://localhost:${SESSION_SERVER_PORT}/elements`);
                    const result = await response.json();
                    
                    if (result.success) {
                        console.log(`Interactive Elements on ${result.url}`);
                        console.log(`Title: ${result.title}`);
                        console.log(`Total elements: ${result.count}`);
                        console.log('');
                        
                        result.elements.forEach((element, i) => {
                            console.log(`${i + 1}. "${element.text}" (${element.tagName})`);
                            if (element.selectors && element.selectors.length > 0) {
                                console.log(`   Selector: ${element.selectors[0]}`);
                                if (element.selectors.length > 1) {
                                    console.log(`   Alt: ${element.selectors.slice(1).join(', ')}`);
                                }
                            }
                            if (element.href) console.log(`   Href: ${element.href}`);
                            if (element.classes) console.log(`   Classes: ${element.classes}`);
                            if (element.id) console.log(`   ID: ${element.id}`);
                            console.log('');
                        });
                    } else {
                        console.error(`✗ Failed to get elements: ${result.error}`);
                    }
                } catch (error) {
                    console.log('✗ No active browser session');
                }
                break;
            }
                
            case 'status': {
                try {
                    const response = await fetch(`http://localhost:${SESSION_SERVER_PORT}/status`);
                    const result = await response.json();
                    
                    if (result.status === 'active') {
                        console.log('✓ Browser session is active');
                        console.log(`Title: ${result.title}`);
                        console.log(`URL: ${result.url}`);
                        console.log(`Firefox processes: ${result.processes}`);
                    } else {
                        console.log('✗ No active browser session');
                    }
                } catch (error) {
                    console.log('✗ No active browser session');
                }
                break;
            }
                
            case 'close': {
                const result = await makeRequest('/close');
                if (result.success) {
                    console.log('✓ Browser closed');
                } else {
                    console.error(`✗ Close failed: ${result.error}`);
                }
                break;
            }
                
            default:
                console.error(`Unknown command: ${command}`);
                console.error('Run "selenium-cli --help" for usage');
                process.exit(1);
        }
    } catch (error) {
        console.error(`✗ Error: ${error.message}`);
        process.exit(1);
    }
}

main().catch(console.error);