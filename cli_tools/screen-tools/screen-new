#!/bin/bash
# Start a new named screen session

if [ $# -eq 0 ]; then
    # No name provided, use directory-based name
    DIR_NAME=$(basename "$PWD")
    
    # Clean the directory name (remove special chars, truncate if too long)
    CLEAN_DIR=$(echo "$DIR_NAME" | sed 's/[^a-zA-Z0-9_-]/-/g' | cut -c1-20)
    
    # Add timestamp suffix for uniqueness (HHMM format)
    SUFFIX=$(date +%H%M)
    
    SESSION_NAME="${CLEAN_DIR}-${SUFFIX}"
    echo "ðŸ“º Creating screen session '${SESSION_NAME}' in $(pwd)"
else
    # Use provided name
    SESSION_NAME="$1"
    echo "ðŸ“º Creating screen session: ${SESSION_NAME}"
fi

# Check if session already exists
if screen -list | grep -q "\.${SESSION_NAME}"; then
    echo "Error: Session '${SESSION_NAME}' already exists!"
    echo "Active sessions:"
    screen -list
    exit 1
fi

# Start new screen session with current directory preserved
STARTUP_DIR="$PWD"

# Method from Stack Overflow: use eval to set directory before creating window
# First create the session in detached mode
screen -d -m -S "${SESSION_NAME}"

# Then use eval to change directory and create the initial window
screen -S "${SESSION_NAME}" -X eval "chdir $STARTUP_DIR" "screen -t bash 0 bash"

# Kill the default window that was created
screen -S "${SESSION_NAME}" -X select 0
screen -S "${SESSION_NAME}" -X kill

# Now attach to the session
exec screen -r "${SESSION_NAME}"