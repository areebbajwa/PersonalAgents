#!/bin/bash
# List all active screen sessions with details and usage tracking

# Usage stats file
USAGE_STATS_FILE="$HOME/.screen_usage_stats"

# Function to initialize usage stats file if it doesn't exist
init_usage_stats() {
    if [[ ! -f "$USAGE_STATS_FILE" ]]; then
        echo '{}' > "$USAGE_STATS_FILE"
    fi
}

# Function to get usage count for a session pattern
get_usage_count() {
    local session_name="$1"
    local count=$(jq -r --arg name "$session_name" '.[$name].count // 0' "$USAGE_STATS_FILE" 2>/dev/null || echo 0)
    echo "$count"
}

# Function to get last access time for a session pattern
get_last_access() {
    local session_name="$1"
    local last_access=$(jq -r --arg name "$session_name" '.[$name].last_access // 0' "$USAGE_STATS_FILE" 2>/dev/null || echo 0)
    echo "$last_access"
}

# Initialize usage stats
init_usage_stats

echo "=== Active Screen Sessions ==="
echo

# Check if any sessions exist
if ! screen -list | grep -E -q '^\s*[0-9]+\.'; then
    echo "No active screen sessions found."
    exit 0
fi

# Create temporary file for sorting
TEMP_FILE=$(mktemp)

# Parse sessions and calculate usage scores
screen -list | grep -E '^\s*[0-9]+\.' | while read -r line; do
    # Extract session info
    PID=$(echo "$line" | awk '{print $1}' | cut -d. -f1)
    NAME=$(echo "$line" | awk '{print $1}' | cut -d. -f2-)
    STATUS=$(echo "$line" | awk '{print $2,$3}' | tr -d '()')
    
    # Get usage stats
    USAGE_COUNT=$(get_usage_count "$NAME")
    LAST_ACCESS=$(get_last_access "$NAME")
    
    # Calculate score (weight: 70% usage count, 30% recency)
    # Normalize last_access to 0-100 range (within last 30 days)
    CURRENT_TIME=$(date +%s)
    TIME_DIFF=$((CURRENT_TIME - LAST_ACCESS))
    RECENCY_SCORE=0
    if [[ $LAST_ACCESS -gt 0 ]]; then
        # Score from 100 (just accessed) to 0 (30+ days old)
        DAYS_OLD=$((TIME_DIFF / 86400))
        if [[ $DAYS_OLD -lt 30 ]]; then
            RECENCY_SCORE=$((100 - (DAYS_OLD * 100 / 30)))
        fi
    fi
    
    # Combined score
    SCORE=$((USAGE_COUNT * 70 + RECENCY_SCORE * 30 / 100))
    
    # Save to temp file for sorting
    echo "$SCORE|$PID|$NAME|$STATUS|$USAGE_COUNT" >> "$TEMP_FILE"
done

# Sort by score (descending) and display
sort -t'|' -k1 -nr "$TEMP_FILE" | while IFS='|' read -r SCORE PID NAME STATUS USAGE_COUNT; do
    echo "Session: ${NAME}"
    echo "  PID: ${PID}"
    echo "  Status: ${STATUS}"
    echo "  Usage: ${USAGE_COUNT} times"
    echo
done

# Clean up
rm -f "$TEMP_FILE"

# Show summary
TOTAL=$(screen -list | grep -E -c '^\s*[0-9]+\.')
echo "Total sessions: ${TOTAL}"