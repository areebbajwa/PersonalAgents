name: "Task Mode"
description: "Task planning and execution workflow - simplified autonomous task execution"
steps:
  - number: 1
    title: "Announce Task Mode"
    content: |
      MANDATORY first response:
      ü§ñ **TASK MODE ACTIVATED**
      
      I will complete this task autonomously without asking for help (except for 2FA).
      
      {% if task %}
      **Task:** {{ task }}
      {% endif %}
      
      **‚ö†Ô∏è IMPORTANT: DO NOT start implementation yet. This is the planning phase.**
      
      **Next Step:** Run `workflow continue [project-name]` to continue
    mandatory: true

  - number: 2
    title: "Setup Worktree Environment"
    content: |
      **WORKTREE SETUP DECISION TREE:**
      
      **Decision 1: Check for existing todo**
      ```yaml
      existing_todo_check:
        - check: "Does todo file exist in ~/PersonalAgents/todos/?"
        - pattern: "YYYYMMDD-[project-name]-todo.md"
        - if_exists: "Go to Decision 2A"
        - if_not_exists: "Go to Decision 2B"
      ```
      
      **Decision 2A: Existing todo - Check worktree**
      ```yaml
      existing_todo_worktree:
        - check: "Does worktrees/[project-name] exist?"
        - if_exists:
            - action: "Switch to existing worktree"
            - commands: ["cd worktrees/[project-name]"]
            - next_step: "Skip to step 4 (update existing todo structure if needed)"
        - if_not_exists:
            - action: "Recreate worktree for existing todo"
            - commands:
                - "mkdir -p worktrees"
                - "git worktree add worktrees/[project-name] -b [project-name]-YYYYMMDD"
                - "cd worktrees/[project-name]"
            - next_step: "Skip to step 4 (continue with existing todo)"
      ```
      
      **Decision 2B: New work - Check current location**
      ```yaml
      new_work_location:
        - check: "Is current path in /worktrees/ directory?"
        - if_in_worktree:
            - action: "Use existing worktree (from yolo command)"
            - result: "Ready for new work"
        - if_not_in_worktree:
            - action: "Create new worktree"
            - commands:
                - "mkdir -p worktrees"
                - "git worktree add worktrees/[project-name] -b [project-name]-YYYYMMDD"
                - "cd worktrees/[project-name]"
                - "git push -u origin [project-name]-YYYYMMDD"
            - result: "Ready for new work"
      ```
      
      **Next Step:** Run `workflow continue [project-name]` to continue
    mandatory: true

  - number: 3
    title: "Search for Context"
    content: |
      **‚ö†Ô∏è IMPORTANT: This is research phase - DO NOT implement anything yet.**
      
      Before starting ANY work, execute these search actions:
      
      **PRIORITY CHECK:**
      If essentially the same task was done recently, just look at its todo list in `todos/` and follow it instead of doing a thorough context search.
      
      **Local Context:**
      1. Search `docs/` directory for relevant documentation
      2. Check `todos/` for previous learnings to avoid same mistakes
      3. Look in `data/` directory for existing resources
      4. Check `config/.env` for API keys and credentials
      5. Search for existing utilities and scripts to reuse
      
      **Web Context:**
      6. Search web for best practices related to the task
      7. Find latest API documentation if working with external services
      8. Look for recent updates or changes to tools/libraries
      
      **IMPORTANT:** Only use context that's directly relevant to the current task. Don't mix in unrelated information.
      
      **Next Step:** Run `workflow continue [project-name]` to continue
    mandatory: true

  - number: 4
    title: "Create Task Plan"
    content: |
      **‚ö†Ô∏è IMPORTANT: Final planning step - DO NOT implement yet!**
      
      **Actions to perform:**
      Create TODO file at: `todos/YYYYMMDD-[project-name]-todo.md`
      
      **Group similar actions together to avoid switching costs** (e.g., all file edits together, all API calls together)
      
      **Example format:**
      ```markdown
      # YYYYMMDD-[project-name]-todo.md
      
      ## Non-Negotiable User Requirements: "{% if task %}{{ task }}{% else %}[exact user words preserved here]{% endif %}"
      
      ## Context Discovery
      - Link to relevant existing code: [file_path:line number]
      - Related todos/learnings: [link to relevant todo files]
      - Key insights from codebase research: [brief summary with file links]
      
      ## Tasks
      ‚úÖ [14:15] Navigate to bank website and login
      
      # Download all statements (grouped to avoid re-navigation)
      ‚úÖ [14:22] Download January 2025 statement
      ‚úÖ [14:23] Download December 2024 statement
      ‚úÖ [14:24] Download November 2024 statement
      üïí [14:25] Download October 2024 statement
      üïí Download September 2024 statement
      üïí Download August 2024 statement
      
      # Process all statements (after all downloads complete)
      üïí Extract transactions from all PDFs
      üïí Categorize expenses and merge into single report
      üïí Save to data/finance/2024-summary.csv
      üïí Run workflow continue [project-name]
      
      ## Notes
      üî• BREAKTHROUGH [14:20]: Found statements are in consistent PDF format, can batch process
      ```
      
      **Next Step:** Run `workflow continue [project-name]` to continue
    mandatory: true

  - number: 5
    title: "Pre-Execution Setup"
    content: |
      **PRE-EXECUTION CHECKS:**
      
      **Check 1: API Key Requirements**
      ```yaml
      api_key_status:
        - question: "Are required API keys missing from config/.env?"
        - if_missing:
            - action: "Use browser-cli automation to obtain keys"
            - steps:
                - "browser-cli start"
                - "Navigate to service API dashboard"
                - "Copy required API keys"
                - "Add to config/.env"
        - if_present: "Continue to execution"
      ```
      
      **Check 2: Tool Strategy Decision**
      ```yaml
      tool_strategy:
        - question: "Does task require general-purpose functionality?"
        - if_general_purpose:
            - check: "Does existing CLI tool handle this?"
            - if_exists_broken: "Priority: Fix existing tool first"
            - if_not_exists: "Priority: CREATE new general-purpose tool"
            - avoid: "Do NOT create workarounds when proper tool needed"
        - if_task_specific: "Create script in scripts/ directory"
      ```
      
      **Next Step:** Run `workflow continue [project-name]` to continue
    mandatory: true

  - number: 6
    title: "Execute Plan Step by Step"
    content: |
      **NOW YOU CAN START IMPLEMENTATION!**
      
      **Execution Loop:**
      1. Complete one planned step from your TODO file
      2. Update todo file with ‚úÖ when done, üïí for in progress
      3. Log breakthroughs with üî• BREAKTHROUGH: when stuck
      4. Move to next planned step
      
      **Tool Implementation Priority:**
      - Always improve existing tools over creating band-aid fixes
      - Create proper tool solutions, not workarounds
      - Fix broken tools before building new functionality
      
      **Continue until entire todo list is completed**
      
      **Next Step:** Run `workflow continue [project-name]` to continue
    mandatory: true

  - number: 7
    title: "Clean Up Environment"
    content: |
      Before final steps, clean up temporary files:
      1. Delete test logs: `rm -f *.log test.log`
      2. Remove temporary files: `rm -f temp_* tmp_*`
      3. Clean up debug files: `rm -f debug_* *.debug`
      4. Remove unneeded test artifacts
      5. Verify only necessary files remain
      
      **Next Step:** Run `workflow continue [project-name]` to continue
    mandatory: true

  - number: 8
    title: "Final Verification"
    content: |
      **VERIFICATION DECISION TREE:**
      
      **Step 1: Requirements Verification**
      ```yaml
      requirements_verification:
        - action: "Check todo file's Non-Negotiable User Requirements section"
        - question: "Are ALL requirements satisfied?"
        - if_all_met: "Go to Step 2"
        - if_not_met:
            - action: "Update todo list with missing items"
            - command: "workflow set-step [project-name] 5"
            - note: "Do NOT continue until requirements met"
      ```
      
      **Step 2: Task Completion Check**
      ```yaml
      task_completion:
        - question: "Are all todo tasks completed successfully?"
        - if_completed: "Go to Step 3"
        - if_incomplete: "Return to execution step"
      ```
      
      **Step 3: File Management**
      ```yaml
      file_management:
        - action: "Update todo file with final completion status"
        - action: "Move todo file to todos/completed/ directory"
        - action: "Final commit and push all changes"
        - result: "Verification complete"
      ```
      
      **Next Step:** Run `workflow continue [project-name]` to continue
    mandatory: true

  - number: 9
    title: "Clean Up Environment"
    content: |
      **CLEANUP DECISION TREE:**
      
      **Step 1: Git Status Review**
      ```yaml
      git_status_review:
        - action: "Run git status and review all changes"
        - note: "CLI tool changes appear in git -C ~/PersonalAgents status"
        - question: "Are changes relevant to requirements?"
        - if_relevant: "Keep changes"
        - if_irrelevant: "Remove unnecessary code/files"
      ```
      
      **Step 2: Tool Classification**
      ```yaml
      tool_classification:
        - question: "Were general-purpose tools created?"
        - if_general_tools:
            - action: "Document in todo under 'Helpful Tools Created'"
            - action: "Keep tools for future use"
        - if_task_specific:
            - question: "Explicitly required to keep?"
            - if_required: "Keep and document"
            - if_not_required: "Delete task-specific scripts"
      ```
      
      **Step 3: Environment Cleanup**
      ```yaml
      environment_cleanup:
        - action: "Update/delete conflicting docs/references"
        - action: "Ensure .gitignore is up-to-date"
        - action: "Remove temporary files and artifacts"
        - result: "Environment cleaned"
      ```
      
      **Next Step:** Run `workflow continue [project-name]` to continue
    mandatory: true

  - number: 10
    title: "Branch Management - Auto Merge"
    content: |
      **Automatically merge to main branch:**
      
      First identify the main branch:
      1. `git branch -r --sort=-committerdate | head -5` (find most active branch)
      2. Usually main, master, or develop
      
      Execute merge automatically:
      1. `git checkout [main-branch]`
      2. `git pull origin [main-branch]`
      3. `git merge [task-branch]`
      4. `git push origin [main-branch]`
      5. `git branch -d [task-branch]`
      6. `git push origin --delete [task-branch]`
      
      **Next Step:** Run `workflow continue [project-name]` to continue
    mandatory: true

  - number: 11
    title: "Clean Project State"
    content: |
      Final cleanup step:
      
      1. Clean project state: `workflow kill [project-name]`
      2. Remove worktree AND folder:
         ```
         pwd  # Note current directory for cleanup
         cd ../..
         git worktree remove worktrees/[project-name]
         rm -rf worktrees/[project-name]  # Delete folder if still exists
         ```
      
      {% if spawned %}
      3. Close spawned workflow window:
         ```
         tmux kill-window -t ${TMUX_PANE}
         ```
      {% endif %}
      
      **Workflow Complete:** Task finished and state cleaned up
    mandatory: true

global_rules:
  - title: "Core Principles"
    content: |
      1. Complete tasks autonomously without help (except 2FA)
      2. Check existing code/todos first
      3. Keep trying different approaches until success
      4. Update todos/YYYYMMDD-[project]-todo.md with timestamps in format: [HH:MM] using ‚úÖüïíüî•
      5. Search the web as needed for documentation and solutions
      6. Keep directory structure clean: place new files in appropriate directories (cli_tools/, docs/, data/, scripts/, etc.)
      7. Batch processing mindset: Process multiple files at once, use batch APIs, combine similar commands

  - title: "Never Do"
    content: |
      - NEVER stop until task is complete
      - NEVER give up - find another way
      - NEVER ask for help (except 2FA)

  - title: "Terminal Command Limits"
    content: |
      - Commands timeout after 2 minutes - run long tasks in background: `cmd > /tmp/log.txt 2>&1 &`
      - Never use sleep > 119 seconds

  - title: "Automation Tools"
    content: |
      - Look for existing CLI tools in the codebase first
      - Check available MCP tools and resources
      - Use official APIs first, browser-cli browser only for unsupported features
      - browser-cli browser: unblock auth, get API keys, one-time setup tasks
      - PDF processing: pdf-ai-cli for extraction and analysis
      - Database queries: sqlite3 CLI with direct SQL
      - Take screenshots when curious/stuck: screenshot-cli tool
      - Use record-cli to record screen and send to AI for analysis if screenshots don't suffice
      - Last resort for GUI tasks: desktop-automation-cli
      
  - title: "Spawning Workflows"
    content: |
      - Use workflow to create independent workflows in separate tmux windows
      - Spawn a dev workflow: `workflow spawn project-name dev "task description"`
      - Spawn a task workflow: `workflow spawn project-name task "task description"`
      - List active workflows: `workflow list`
      - Kill a workflow: `workflow kill project-name`
      - Spawned workflows run independently and auto-close when complete
      - Use this when you need parallel execution or to delegate subtasks
      
  - title: "Creating New Tools During Tasks"
    content: |
      - **IMPORTANT**: Distinguish between task-specific scripts and general-purpose tools
      - **Scripts (in scripts/)**: For task-specific automation
        - Create directly in task mode: `scripts/process-invoices-2025.js`
        - Delete after task completion
        - No need to spawn workflows for scripts
      - **CLI Tools**: For general-purpose functionality
        - ‚úÖ First check if an existing tool can be used or improved
        - ‚úÖ If no existing tool fits, CREATE the new general-purpose tool
        - ‚ùå DO NOT avoid creating tools by doing workarounds
        - ‚úÖ Need PDF extraction for many tasks? `workflow spawn pdf-extractor dev "create general PDF extraction CLI"`
        - ‚ùå Need to process Company X invoices? Just create a script
      - Example in todo: `üïí Create script to process bank statements: scripts/parse-bank-statements.py`
      - Ask yourself: "Will I use this again for different tasks?" If yes, make it a CLI tool

  - title: "AI Integration for New Tools/Scripts"
    content: |
      - Always use ai_cache_utils.js for caching AI calls
      - Use file I/O for large data exchanges
      - Prefer Gemini models for complex tasks
      - Structure prompts for YAML output when needed

  - title: "CLI Tool Development"
    content: |
      - Follow /Volumes/ExtremeSSD/PersonalAgents/PersonalAgents/cli_tools/CLI_TOOL_DESIGN_GUIDE.md
      - **Tool Creation Philosophy**:
        - ‚úÖ Always prefer improving existing tools over creating workarounds
        - ‚úÖ Create new general-purpose tools when needed - don't avoid it
        - ‚úÖ Tools should solve problems properly, not with band-aids
      - For new CLI tools: spawn new agent with dev mode workflow using workflow
      - Example: `workflow spawn invoice-cli dev "create invoice-cli tool for generating PDF invoices"`
      - Example todo task: `- üïí Create invoice-cli tool: workflow spawn invoice-cli dev "create invoice CLI tool"`
      - Check spawned workflows: `workflow list`
      - Kill if needed: `workflow kill invoice-cli`
      - Note: CLI tools are symlinked - changes commit to main repo at ~/PersonalAgents, not the worktree

quick_reference:
  essential_commands:
    - "workflow continue [name]"
    - "workflow kill [name]"