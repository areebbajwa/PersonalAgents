name: "Dev Mode"
description: "Development workflow - simplified step-by-step process"
steps:
  - number: 1
    name: "announce"
    title: "Announce Dev Mode"
    content: |
      MANDATORY first response:
      ‚ö° **DEV MODE ACTIVATED**
      
      I'm operating under DEV MODE rules: Simplify ruthlessly, test what matters, and create modern, maintainable code.
      
      {% if task %}
      **Task:** {{ task }}
      {% endif %}
      
      **‚ö†Ô∏è IMPORTANT: DO NOT start implementation yet. This is the planning phase.**
      
      **Next Step:** Run `workflow continue [project-name]` to continue
    mandatory: true

  - number: 2
    name: "setup"
    title: "Check Todo Status & Git Setup"
    content: |
      **SETUP DECISION TREE:**
      
      **Decision 1: Does todo file exist?**
      ```yaml
      todo_check:
        - look_for: "~/PersonalAgents/todos/YYYYMMDD-[project]-todo.md"
        - if_exists: "Go to Decision 2A"
        - if_not_exists: "Go to Decision 2B"
      ```
      
      Answer each of the questions above systematically before proceeding.
      
      **Decision 2A: Todo exists - Check worktree**
      ```yaml
      existing_todo_worktree_check:
        - check: "Does worktrees/[project-name] directory exist?"
        - if_exists: 
            - action: "Switch to existing worktree"
            - commands: ["cd worktrees/[project-name]"]
            - result: "Continue with existing work"
        - if_not_exists:
            - action: "Recreate missing worktree"
            - commands: 
                - "mkdir -p worktrees"
                - "git worktree add worktrees/[project-name] -b [project-name]-YYYYMMDD"
                - "cd worktrees/[project-name]"
                - "rm -rf cli_tools todos"
                - "ln -s ~/PersonalAgents/cli_tools cli_tools"
                - "ln -s ~/PersonalAgents/todos todos"
            - result: "Continue with existing todo"
      ```
      
      **Decision 2B: No todo - Check current location**
      ```yaml
      new_work_location_check:
        - check: "Is current path in /worktrees/ directory?"
        - if_in_worktree:
            - action: "Use existing worktree (from yolo command)"
            - result: "Ready for new work"
        - if_not_in_worktree:
            - action: "Create new worktree"
            - commands:
                - "mkdir -p worktrees"
                - "git worktree add worktrees/[project-name] -b [project-name]-YYYYMMDD"
                - "cd worktrees/[project-name]"
                - "rm -rf cli_tools todos"
                - "ln -s ~/PersonalAgents/cli_tools cli_tools"
                - "ln -s ~/PersonalAgents/todos todos"
                - "git push -u origin [project-name]-YYYYMMDD"
            - result: "Ready for new work"
      ```
      
      **Note:** cli_tools and todos are symlinked to main repo for centralized changes
      
      **Next Step:** Run `workflow continue [project-name]` to continue
    mandatory: true

  - number: 3
    name: "research"
    title: "Consult Knowledge Base"
    content: |
      **‚ö†Ô∏è IMPORTANT: This is research phase - DO NOT implement anything yet.**
      
      **Execute these research steps:**
      
      1. **Search codebase for similar implementations**
      2. **Find existing code to reuse/extend** (prioritize ai_cache_utils.js for AI calls)
      3. **Check config/.env for existing API keys** before asking user
      4. **Search ~/PersonalAgents/todos/ directory** for previous learnings
      5. **Search web for best practices** on the technology/framework
      6. **Find latest API documentation**
      7. **Look for common patterns and pitfalls**
      8. **Check for batch operation support in APIs**
      
      **Next Step:** Run `workflow continue [project-name]` to continue
    mandatory: true

  - number: 4
    name: "simplify"
    title: "Simplify the Approach"
    content: |
      **‚ö†Ô∏è IMPORTANT: Still in planning phase - NO implementation yet.**
      
      **CRITICAL:** Review Non-Negotiable User Requirements from todo file - NEVER violate these when simplifying.
      
      **Core Question: "What is the simplest way I can satisfy all the non-negotiable user requirements given all the rules?"**
      
      **Answer these planning questions systematically:**
      
      1. **Simplification Questions:**
         - What's the absolute minimal implementation that fully meets requirements?
         - What complexity can I eliminate while still delivering everything asked?
         - Can I solve this in 10 lines instead of 100?
      
      2. **Reuse & Libraries Questions:**
         - What existing tools in cli_tools/ can I use or extend?
         - Are there GitHub/npm libraries that already solve this?
         - Can I modify existing code instead of writing new code?
      
      3. **Architecture Questions:**
         - What's the simplest architecture that handles all use cases?
         - Can I use batch operations instead of loops?
         - Should I start with in-memory solutions before adding complexity?
      
      4. **Tool vs Script Questions:**
         - Is this general-purpose (CLI tool) or task-specific (script)?
         - Would other AI agents find this useful?
         - Does this belong in cli_tools/ or scripts/?
      
      5. **AI Integration Questions:**
         - Where can gemini-2.5-pro + ai_cache_utils.js simplify the solution?
         - Can AI handle complex logic I'd otherwise code manually?
      
      6. **Testing Strategy Questions:**
         - What's the minimum testing that ensures requirements are met?
         - Can I write one comprehensive test instead of many small ones?
      
      Answer each of the questions above systematically before proceeding.
      
      **Next Step:** Run `workflow continue [project-name]` to continue
    mandatory: true

  - number: 5
    name: "plan"
    title: "Plan with Test Gates and Todo Management"
    content: |
      **‚ö†Ô∏è IMPORTANT: Final planning step - DO NOT implement yet!**
      
      **Complete these pre-planning checks:**
      
      1. **Check CLI Tool Requirements:**
         - Question: "Is this task creating a CLI tool?"
         - If yes: "Include requirements from CLI_TOOL_DESIGN_GUIDE.md"
         - If no: "Skip CLI-specific requirements"
      
      2. **Check API Key Requirements:**
         - Question: "Are API keys missing from config/.env?"
         - If yes: "Add API key acquisition to plan"
         - If no: "Skip API key setup"
         - API key acquisition plan (if needed):
           - Use browser-cli automation
           - Navigate to service API dashboard
           - Copy required API keys
           - Add to config/.env file
      
      Answer each of the questions above systematically before proceeding.
      
      **INCREMENTAL PLAN CREATION:**
      
      1. **Create test-gated incremental plan for each feature/component:**
         - Build feature A
         - Write E2E test for A
         - **TEST GATE:** Run test - MUST PASS
         - **REQUIRED:** `workflow sub-task-next [project-name]`
         - Commit: `git commit -m "feat: add X - tests: 5/5 passed"`
         - **CLI tools only:** Commit to main: `git -C ~/PersonalAgents add cli_tools/[tool-name] && git -C ~/PersonalAgents commit -m "feat: add [tool-name] CLI tool"`
         - **Only after test passes:** Build next feature
      
      **TODO FILE CREATION:**
      
      1. **Create todo file:** `~/PersonalAgents/todos/YYYYMMDD-[project-name]-todo.md`
      
      2. **Use this required structure:**
         ```markdown
         # YYYYMMDD-[project-name]-todo.md
         Last updated: [timestamp]
         
         ## Non-Negotiable User Requirements: {% if task %}{{ task }}{% else %}[exact user words]{% endif %}
         
         ## Context Discovery
         
         ## Tasks (with timestamps and status icons)
         
         ## Notes (with breakthrough markers)
         ```
      
      3. **For CLI tools, ensure final tasks include:**
         - Second last: `üïí Run ./scripts/setup-global-cli-tools.sh`
         - Last: `üïí Run workflow continue [project-name]`
      
      **Next Step:** Run `workflow continue [project-name]` to continue
    mandatory: true

  - number: 6
    name: "verify-plan"
    title: "Verify Test-Gated Plan"
    content: |
      **STOP! Complete these verification steps:**
      
      1. **Verify each TEST GATE in your todo file has these 3 elements:**
         - ‚úÖ Test execution step
         - ‚úÖ `workflow sub-task-next [project-name]` command
         - ‚úÖ Commit with test count
      
      2. **If any `--sub-task-next` commands are missing after test gates, go back and add them now.**
      
      3. **CLI Tool vs Script Check:**
         - If the task requires a general-purpose tool:
           - ‚úÖ Check if an existing tool can handle it (update/improve if needed)
           - ‚úÖ If no existing tool fits, CREATE the new tool - don't avoid it
           - ‚úÖ Would other AI agents find this useful?
           - ‚úÖ Will this be used across different tasks?
           - ‚ùå If task-specific, create a script in scripts/ instead
      
      4. **If creating or updating a CLI tool, ensure `./scripts/setup-global-cli-tools.sh` is the second last task** (before final `workflow continue [project-name]`).
      
      **Next Step:** Run `workflow continue [project-name]` to continue
    mandatory: true

  - number: 7
    name: "implement"
    title: "Implement One Piece at a Time"
    content: |
      **NOW YOU CAN START IMPLEMENTATION!**
      
      **Execute these implementation steps:**
      
      1. **Work through your todo list from step 5**
      2. **Write one logical unit of functionality**
      3. **Write E2E test for that functionality**
      4. **Run test and verify it passes**
      5. **After test passes ‚Üí `workflow sub-task-next [project-name]`**
      6. **Update todo file with progress and timestamps**
      7. **ONLY if passed ‚Üí Move to next feature**
      
      **Remember:**
      1. Update timestamps in format [HH:MM] for each task/note
      2. Mark completed tasks with ‚úÖ
      3. Log breakthroughs with üî• BREAKTHROUGH
      4. MUST complete entire todo list autonomously
      5. Never give up, keep trying until done
      
      **Next Step:** Continue until all tasks complete, then run final `--next` from todo
    mandatory: true

  - number: 8
    name: "verify"
    title: "Final Verification"
    content: |
     **VERIFICATION DECISION TREE:**
      
      **Step 1: Check User Requirements**
      ```yaml
      requirements_check:
        - action: "Review todo file's Non-Negotiable User Requirements section"
        - question: "Are ALL user requirements satisfied?"
        - if_all_met: "Go to Step 2"
        - if_not_met: "Go to Step 3 (Fix Missing)"
      ```
      
      **Step 2: CLI Tool Verification (if applicable)**
      ```yaml
      cli_tool_verification:
        - question: "Were CLI tools created in this workflow?"
        - if_no_tools: "Skip to Step 4 (Success)"
        - if_tools_created:
            - verify_checklist:
                - "Has proper command structure with subcommands?"
                - "Includes --help for all commands?"
                - "Has error handling and clear error messages?"
                - "Uses proper argument parsing?"
                - "Follows naming conventions?"
                - "Has been added to cli_tools/ directory?"
            - if_all_checks_pass: "Go to Step 4 (Success)"
            - if_checks_fail: "Go to Step 3 (Fix Missing)"
      ```
      
      Answer each of the questions above systematically before proceeding.
      
      **Step 3: Fix Missing Requirements**
      ```yaml
      fix_missing:
        - action: "Update todo list with missing requirements"
        - action: "Jump back to implementation"
        - command: "workflow set-step [project-name] implement"
        - note: "Do NOT continue until all requirements met"
      ```
      
      **Step 4: Verification Success**
      ```yaml
      verification_success:
        - action: "Update todo file with final verification status"
        - action: "Final commit and push changes"
        - result: "Ready for next step"
      ```
      
      **Next Step:** Run `workflow continue [project-name]` to continue
    mandatory: true

  - number: 9
    name: "cleanup"
    title: "Clean Up Environment"
    content: |
       **Complete these cleanup tasks:**
      
        1. **Git Status Cleanup:**
          - Run `git status` and review all changes
          - Note: CLI tool changes won't appear here - check `git -C ~/PersonalAgents status` to see them
          - Check Non-Negotiable User Requirements from todo file
          - Remove any code/tools/scripts/tests NOT relevant to requirements:
            - Unneeded helper scripts
            - Test files for removed features
            - Documentation for deleted functionality
          - Update/delete conflicting docs/references in other files based on changes
          - Ensure .gitignore is up-to-date
        
        2. **Browser Profile Preservation (if you used browser-cli):**
          - Check if browser-cli is still running: `browser-cli status`
          - If running, stop it first: `browser-cli stop`
          - Find and preserve the temporary profile cookies:
            ```bash
            # Find the most recent selenium temp profile
            TEMP_PROFILE=$(ls -td /tmp/selenium-profile-* 2>/dev/null | head -1)
            if [ -n "$TEMP_PROFILE" ] && [ -d "$TEMP_PROFILE" ]; then
                # Find the default Firefox profile
                DEFAULT_PROFILE=$(find ~/Library/Application\ Support/Firefox/Profiles -name "*.default-release" -type d | head -1)
                if [ -n "$DEFAULT_PROFILE" ]; then
                    # Copy cookies and session data back
                    cp -f "$TEMP_PROFILE/cookies.sqlite"* "$DEFAULT_PROFILE/" 2>/dev/null || true
                    cp -f "$TEMP_PROFILE/sessionstore.jsonlz4" "$DEFAULT_PROFILE/" 2>/dev/null || true
                    echo "Cookies preserved from $TEMP_PROFILE"
                fi
            fi
            ```
          - This ensures any new cookies/logins are preserved for future sessions
        
        **Next Step:** Run `workflow continue [project-name]` to continue
    mandatory: true

  - number: 10
    name: "merge"
    title: "Branch Management - Auto Merge"
    content: |
      **Complete these merge steps:**
      
      1. **Identify the main branch:**
         - Run `git branch -r --sort=-committerdate | head -5` (find most active branch)
         - Usually main, master, or develop
      
      2. **Execute merge automatically:**
         - `git checkout [main-branch]`
         - `git pull origin [main-branch]`
         - `git merge [feature-branch]`
         - `git push origin [main-branch]`
         - `git branch -d [feature-branch]`
         - `git push origin --delete [feature-branch]`
      
      3. **If created a CLI tool:** Run `./scripts/setup-global-cli-tools.sh`
      
      4. **Note:** CLI tools are symlinked - changes commit to main repo at ~/PersonalAgents, not the worktree
      
      **Next Step:** Run `workflow continue [project-name]` to continue
    mandatory: true

  - number: 11
    name: "finish"
    title: "Clean Project State"
    content: |
      **Complete these final cleanup steps:**
      
      1. **Clean project state:** `workflow kill [project-name]`
      
      2. **Discard symlink changes and remove worktree:**
         ```
         pwd  # Note current directory for cleanup
         git checkout -- cli_tools todos  # Discard symlink changes
         cd ../..
         git worktree remove worktrees/[project-name]
         rm -rf worktrees/[project-name]  # Delete folder if still exists
         ```
      
      {% if spawned %}
      3. **Close spawned workflow window:**
         ```
         tmux kill-window -t ${TMUX_PANE}
         ```
      {% endif %}
      
      **Workflow Complete:** Project finished and state cleaned up
    mandatory: true

global_rules:
  - title: "Core Principles"
    content: |
      1. Simplify ruthlessly, test what matters
      2. Never proceed with failing tests
      3. Use batch APIs instead of loops
      4. Check existing code/todos first
      5. Ask before commits/final submissions
      6. Update ~/PersonalAgents/todos/YYYYMMDD-[project]-todo.md with timestamps in format: [HH:MM] using ‚úÖüïíüî•
      7. MUST complete entire todo list autonomously - never stop until done (only ask for help if stuck on 2FA)
      8. NEVER take shortcuts when completing todo list - fix whatever is broken as needed so future tasks are easier
      9. NEVER mark todo items complete hastily - if you realize you marked something complete prematurely, immediately undo it
      10. Search the web as needed for documentation and solutions
      11. Keep directory structure clean: place new files in appropriate directories (cli_tools/, tests/, docs/, data/, scripts/, etc.)
      12. ALWAYS read debug logs before attempting any fix - never make blind fixes
      13. If dealing with anything GUI related, take screenshots regularly to understand what's going on
      14. NO FALLBACK CODE - Keep logic simple and direct, avoid complex fallback patterns
      15. ALWAYS find root cause of issues and fix it - never add band-aid fixes or fallbacks
      16. Use GitHub/npm libraries instead of reinventing the wheel - search for existing solutions first
      17. If stuck after significant effort and things are messy - first search web for best practices, then simplify and rebuild from scratch instead of fixing broken code
      18. Never duplicate any code or create any redundancy. Update/delete/refactor as needed.
      19. **AI Integration:** Always use gemini-2.5-pro for ANY AI intelligence needs (text, vision, code analysis, etc.) - use ai_cache_utils.js for caching

  - title: "UpdateTodo Command Handler"
    content: |
      **WHEN USER SAYS "updatetodo":**
      ```yaml
      updatetodo_handler:
        - action: "Add new requirement to Non-Negotiable User Requirements section of current todo file"
        - action: "Save the updated todo file"
        - action: "Jump to 'plan' step (step 5)"
        - command: "workflow set-step [project-name] 5"
        - reason: "The 'plan' step will re-evaluate the plan with the new requirements"
      ```


  - title: "Never Do"
    content: |
      - NEVER proceed with failing tests
      - NEVER mark complete without E2E testing
      - NEVER mark todo items complete hastily - undo immediately if done prematurely
      - NEVER attempt fixes without reading debug logs first
      - NEVER try to fix GUI issues without taking screenshots
      - NEVER add band-aid fixes or fallbacks - always find and fix root cause
      - NEVER take shortcuts when completing todo list - fix problems properly
      - NEVER give up - find another way

  - title: "Terminal Command Limits"
    content: |
      - Commands timeout after 2 minutes - run long tasks in background: `cmd > /tmp/log.txt 2>&1 &`
      - Never use sleep > 119 seconds

  - title: "Automation Tools"
    content: |
      - Check available MCP tools and resources
      - Use official APIs first, browser-cli browser only for unsupported features
      - browser-cli browser: unblock auth, get API keys, one-time setup tasks
      - Take screenshots when curious/stuck: screenshot-cli tool
      - Use record-cli to record screen and send to AI for analysis if screenshots don't suffice
      - Last resort for GUI tasks: desktop-automation-cli
      
  - title: "Spawning Workflows"
    content: |
      - Use workflow spawn to create independent workflows in separate tmux windows
      - Spawn a dev workflow: `workflow spawn project-name dev "task description"`
      - Spawn a task workflow: `workflow spawn project-name task "task description"`
      - List active workflows: `workflow list`
      - Kill a workflow: `workflow kill project-name`
      - Spawned workflows run independently and auto-close when complete
      
  - title: "Creating New Tools"
    content: |
      - **IMPORTANT**: This is for SECONDARY tools only - not your main task!
      - If your todo list's main task is to create a tool, do it in THIS workflow
      - Only spawn new workflows for additional tools discovered during development
      - **Tool Creation Philosophy**:
        - ‚úÖ Always prefer improving existing tools over creating workarounds
        - ‚úÖ Create new general-purpose tools when needed - don't avoid it
        - ‚úÖ Tools should solve problems properly, not with band-aids
      - Example: Building a web scraper (main task) but need a PDF parser? `workflow spawn pdf-parser dev "create CLI tool to parse PDFs"`
      - Example: Creating an API client (main task) but need a data validator? `workflow spawn data-validator dev "create validation tool"`
      - This ensures proper isolation and allows parallel development of secondary tools
      - The spawned workflow will handle all setup, testing, and global installation
      
  - title: "CLI Tools vs Scripts"
    content: |
      - **CLI Tools (in cli_tools/)**: For GENERAL-PURPOSE tools that help build an AI agent
        - ‚úÖ pdf-ai-cli: Extracts data from ANY PDF
        - ‚úÖ browser-cli: Automates ANY website
        - ‚úÖ gmail-cli: Manages ANY Gmail account
        - ‚ùå invoice-processor: Too specific, make it a script instead
        - ‚ùå company-x-api-client: Too specific, make it a script instead
      - **Scripts (in scripts/)**: For task-specific automation
        - One-time data processing
        - Company-specific integrations
        - Task-specific workflows
        - Delete when no longer needed
      - **IMPORTANT**: When a task requires a general-purpose tool:
        - ‚úÖ First check if an existing tool can be used or improved
        - ‚úÖ If no existing tool fits, CREATE the new general-purpose tool
        - ‚ùå DO NOT avoid creating tools by doing workarounds
        - ‚ùå DO NOT create task-specific scripts when a general tool would be better
      - Ask yourself: "Would other AI agents find this useful?" If yes, make it a CLI tool
      
  - title: "AI Integration Standards"
    content: |
      - **Model Selection:** Always use gemini-2.5-pro for ALL AI tasks:
        - Text analysis and generation
        - Vision tasks (image analysis, screenshots)
        - Code analysis and generation
        - Multi-modal tasks
      - **Implementation:** Always use ai_cache_utils.js for:
        - Automatic caching of AI responses
        - Consistent error handling
        - Token usage tracking
      - **Best Practices:**
        - Structure prompts for YAML/JSON output when parsing needed
        - Use file I/O for large data exchanges instead of console output
        - Batch multiple AI calls when possible
        - Check cache before making redundant calls
        - For vision tasks: pass image paths directly to gemini-2.5-pro


quick_reference:
  essential_commands:
    - "workflow start [name] dev 'task description'"
    - "workflow continue [name]"
    - "workflow sub-task-next [name]"
    - "workflow remind-rules [name]"
    - "workflow kill [name]"

emergency_procedures:
  - title: "Rollback"
    commands:
      - "git reset --hard [commit-hash]"
      - "git push --force-with-lease origin HEAD"
  
  - title: "Session Recovery"
    commands:
      - "git branch --show-current"
      - "git status"
      - "Check ~/PersonalAgents/todos/YYYYMMDD-[project]-todo.md for progress"
      - "Run tests"
      - "Continue with commits"