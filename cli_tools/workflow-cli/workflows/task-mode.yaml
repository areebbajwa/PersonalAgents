name: "Task Mode"
description: "Task planning and execution workflow - simplified autonomous task execution"
steps:
  - number: 1
    title: "Announce Task Mode"
    content: |
      MANDATORY first response:
      ðŸ¤– **TASK MODE ACTIVATED**
      
      I will complete this task autonomously without asking for help (except for 2FA).
      
      **Check for existing todo:**
      If continuing work on existing todo file in `todos/`, skip to step 4.
      
      **For new work, execute git setup IMMEDIATELY:**
      1. Create branch:
         ```
         git checkout -b [project-name]-YYYYMMDD
         git push -u origin [project-name]-YYYYMMDD
         ```
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 2
    title: "Search for Context"
    content: |
      Before starting ANY work, execute these search actions:
      
      **PRIORITY CHECK:**
      If essentially the same task was done recently, just look at its todo list in `todos/` and follow it instead of doing a thorough context search.
      
      **Local Context:**
      1. Search `docs/` directory for relevant documentation
      2. Check `todos/` for previous learnings to avoid same mistakes
      3. Look in `data/` directory for existing resources
      4. Check `config/.env` for API keys and credentials
      5. Search for existing utilities and scripts to reuse
      
      **Web Context:**
      6. Search web for best practices related to the task
      7. Find latest API documentation if working with external services
      8. Look for recent updates or changes to tools/libraries
      
      **IMPORTANT:** Only use context that's directly relevant to the current task. Don't mix in unrelated information.
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 3
    title: "Create Task Plan"
    content: |
      **Actions to perform:**
      Create TODO file at: `todos/YYYYMMDD-[project-name]-todo.md`
      
      **Example format:**
      ```markdown
      # Task: [User's request]
      
      ## Todo List:
      - ðŸ•’ Search for existing customer data export scripts
      - ðŸ•’ Extract customer data from database
      - ðŸ•’ Filter for active customers only
      - ðŸ•’ Generate CSV report with required fields
      - ðŸ•’ Save to data/exports/ directory
      - ðŸ•’ Run workflow-cli --project [project-name] --next
      
      ## Progress Log:
      [Updates will go here as tasks complete]
      ```
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 4
    title: "Execute Plan Step by Step"
    content: |
      **Actions to perform:**
      1. Complete one planned step from your TODO file
      2. Update todo file with âœ… when done, ðŸ•’ for in progress
      3. Log breakthroughs with ðŸ”¥ BREAKTHROUGH: when stuck
      4. Move to next planned step
      
      **CLI Tool Priority:**
      If a CLI tool exists for the task but doesn't work, priority should be to fix it first before attempting alternative approaches.
      
      **Batch Processing Mindset:**
      Before executing any step, ask: "Can I do this faster in batches?"
      - Processing multiple files? Do them all at once
      - Making multiple API calls? Look for batch endpoints
      - Running similar commands? Combine them
      
      **Call --next ONLY when entire todo list is completed**
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 5
    title: "Clean Up Environment"
    content: |
      Before final steps, clean up temporary files:
      1. Delete test logs: `rm -f *.log test.log`
      2. Remove temporary files: `rm -f temp_* tmp_*`
      3. Clean up debug files: `rm -f debug_* *.debug`
      4. Remove unneeded test artifacts
      5. Verify only necessary files remain
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 6
    title: "Final Verification"
    content: |
      Execute these final steps before marking complete:
      1. Verify all tasks completed successfully
      2. Update todo file with final status
      3. Move TODO file to `todos/completed/`
      4. Final commit and push
      5. Clean project state: `workflow-cli --project [project-name] --clean`
      
      **Workflow Complete:** Task ready for delivery
    mandatory: true

  - number: 7
    title: "Branch Management Decision"
    content: |
      **WAIT FOR USER INSTRUCTION** before proceeding:
      
      First identify the main branch:
      1. `git branch -r --sort=-committerdate | head -5` (find most active branch)
      2. Usually main, master, or develop
      
      Ask user: "Should I merge this branch into [main-branch] and delete the task branch?"
      
      If YES:
      1. `git checkout [main-branch]`
      2. `git pull origin [main-branch]`
      3. `git merge [task-branch]`
      4. `git push origin [main-branch]`
      5. `git branch -d [task-branch]`
      6. `git push origin --delete [task-branch]`
      
      If NO: Leave branch as-is for manual review
      
      **Workflow Complete**
    mandatory: true

global_rules:
  - title: "Core Principles"
    content: |
      1. Complete tasks autonomously without help (except 2FA)
      2. Check existing code/todos first
      3. Keep trying different approaches until success
      4. Update todos/YYYYMMDD-[project]-todo.md with âœ…ðŸ•’ðŸ”¥
      5. Search the web as needed for documentation and solutions
      6. Keep directory structure clean: place new files in appropriate directories (cli_tools/, docs/, data/, scripts/, etc.)

  - title: "Never Do"
    content: |
      - NEVER stop until task is complete
      - NEVER give up - find another way
      - NEVER ask for help (except 2FA)

  - title: "Automation Tools"
    content: |
      - Look for existing CLI tools in the codebase first
      - Check available MCP tools and resources
      - Use official APIs first, selenium browser only for unsupported features
      - Selenium browser: unblock auth, get API keys, one-time setup tasks
      - PDF processing: pdf-ai-cli for extraction and analysis
      - Database queries: sqlite3 CLI with direct SQL
      - Take screenshots when curious/stuck: screenshot-cli tool
      - Last resort for GUI tasks: desktop-automation-cli

  - title: "AI Integration for New Tools/Scripts"
    content: |
      - Always use ai_cache_utils.js for caching AI calls
      - Use file I/O for large data exchanges
      - Prefer Gemini models for complex tasks
      - Structure prompts for YAML output when needed

  - title: "CLI Tool Development"
    content: |
      - Follow /Volumes/ExtremeSSD/PersonalAgents/PersonalAgents/cli_tools/CLI_TOOL_DESIGN_GUIDE.md
      - For new CLI tools: spawn new agent with dev mode workflow
      - Example todo task: `- ðŸ•’ Create invoice-cli tool: spawn new agent with "workflow-cli --project invoice-cli --mode dev --step 1"`

quick_reference:
  essential_commands:
    - "workflow-cli --project [name] --next"
    - "workflow-cli --project [name] --clean"