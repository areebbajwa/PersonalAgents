name: "Dev Mode"
description: "Development workflow - simplified step-by-step process"
steps:
  - number: 1
    title: "Announce Dev Mode & Start Git Workflow"
    content: |
      MANDATORY first response:
      ‚ö° **DEV MODE ACTIVATED**
      
      I'm operating under DEV MODE rules: Simplify ruthlessly, test what matters, and create modern, maintainable code.
      
      **‚ö†Ô∏è IMPORTANT: DO NOT start implementation yet. This is the planning phase.**
      
      **Check for existing todo:**
      If continuing work on existing todo file in `todos/YYYYMMDD-[project]-todo.md`, skip to step 4 and update existing todo list to match the todo list structure (if needed).
      
      **For new work, execute git setup IMMEDIATELY:**
      1. Create worktree with new branch:
         ```
         mkdir -p worktrees
         git worktree add worktrees/[project-name]-YYYYMMDD -b [project-name]-YYYYMMDD
         cd worktrees/[project-name]-YYYYMMDD
         git push -u origin [project-name]-YYYYMMDD
         ```
      2. Copy config/.env over to new worktree folder because it's in .gitignore.
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 2
    title: "Consult Knowledge Base"
    content: |
      **‚ö†Ô∏è IMPORTANT: This is research phase - DO NOT implement anything yet.**
      
      Execute these research steps:
      
      **Local Context:**
      1. Search codebase for similar implementations
      2. Find existing code to reuse/extend (prioritize ai_cache_utils.js for AI calls)
      3. Check config/.env for existing API keys before asking user
      4. Search todos/ directory for previous learnings
      
      **Web Context:**
      5. Search web for best practices on the technology/framework
      6. Find latest API documentation
      7. Look for common patterns and pitfalls
      8. Check for batch operation support in APIs
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 3
    title: "Apply Musk's 5-Step Process"
    content: |
      **‚ö†Ô∏è IMPORTANT: Still in planning phase - NO implementation yet.**
      
      **CRITICAL:** Review Non-Negotiable User Requirements from todo file - NEVER violate these when simplifying.
      
      Apply this analysis to the current task:
      1. Question: Is this requirement necessary?
      2. Delete: What can we remove?
      3. Simplify: How can we make it simpler?
      4. Accelerate: Speed up only after simplifying
      5. Automate: Automate only proven processes
      
      Example:
      - User wants caching ‚Üí Do ALL endpoints need it?
      - Can we use in-memory instead of Redis?
      - Test the simple solution first
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 4
    title: "Plan with Test Gates and Todo Management"
    content: |
      **‚ö†Ô∏è IMPORTANT: Final planning step - DO NOT implement yet!**
      
      **CLI Tool Check:** If creating a CLI tool, include steps from: `/Volumes/ExtremeSSD/PersonalAgents/PersonalAgents/cli_tools/CLI_TOOL_DESIGN_GUIDE.md`
      
      **API Keys Check:**
      If any required API keys are missing from config/.env:
      - Use selenium-cli browser automation to obtain them (login to service, navigate to API settings)
      - Example: `selenium-cli start` ‚Üí navigate to API dashboard ‚Üí copy keys
      
      Create this incremental plan structure:
      1. Build feature A
      2. Write E2E test for A
      3. TEST GATE: Run test - MUST PASS ‚Üí `workflow-cli --project [project-name] --sub-task-next`
      4. Commit with test status: `git commit -m "feat: add X - tests: 5/5 passed"`
      5. Only then: Build feature B
      6. Write E2E test for B
      7. TEST GATE: Run test - MUST PASS ‚Üí `workflow-cli --project [project-name] --sub-task-next`
      8. Commit with test status
      
      **Create Todo File:** `todos/YYYYMMDD-[project-name]-todo.md`
      
      **Todo List Structure Example:**
      ```markdown
      # YYYYMMDD-[project-name]-todo.md
      Last updated: 2025-06-25 14:32:15
      
      ## Non-Negotiable User Requirements: "[exact user words preserved here]"
      
      ## Context Discovery
      - Link to relevant existing code: [file_path:line number]
      - Related todos/learnings: [link to relevant todo files]
      - Key insights from codebase research: [brief summary with file links]
      
      ## Tasks
      ‚úÖ [14:15] Set up project structure and git branch
      ‚úÖ [14:22] Implement user authentication module
      ‚úÖ [14:25] Write E2E test for authentication
      ‚úÖ [14:26] TEST GATE PASSED ‚Üí `workflow-cli --project [project-name] --sub-task-next`
      üïí [14:32] Add caching layer for API responses
      üïí Write E2E test for caching
      üïí TEST GATE ‚Üí `workflow-cli --project [project-name] --sub-task-next`
      üïí Implement batch processing for data updates
      üïí Write E2E test for batch processing
      üïí TEST GATE ‚Üí `workflow-cli --project [project-name] --sub-task-next`
      üïí Final testing and cleanup
      üïí Run `workflow-cli --project [project-name] --next`
      
      ## Notes
      üî• BREAKTHROUGH [14:28]: Found we can use existing auth middleware instead of building from scratch
      ```
      
      **IMPORTANT:** The FINAL item in your todo list must be:
      `üïí Run workflow-cli --project [project-name] --next`
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 5
    title: "Implement One Piece at a Time"
    content: |
      **NOW YOU CAN START IMPLEMENTATION!**
      
      Execute these implementation steps:
      1. Work through your todo list from step 4
      2. Write one logical unit of functionality
      3. Write E2E test for that functionality
      4. Run test and verify it passes
      5. After test passes ‚Üí `workflow-cli --project [project-name] --sub-task-next`
      6. Update todo file with progress and timestamps
      7. ONLY if passed ‚Üí Move to next feature
      
      **Remember:**
      - Update timestamps in format [HH:MM] for each task/note
      - Mark completed tasks with ‚úÖ
      - Log breakthroughs with üî• BREAKTHROUGH
      - MUST complete entire todo list autonomously
      - Never give up, keep trying until done
      
      **Next Step:** Continue until all tasks complete, then run final `--next` from todo
    mandatory: true

  - number: 6delete
    title: "Clean Up Environment"
    content: |
      Before final commits, clean up temporary/unneeded files by looking at git status. Make sure .gitignore is up-to-date.
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 7
    title: "Final Verification"
    content: |
      Execute these final steps before marking complete:
      1. **REVIEW NON-NEGOTIABLES:** Check todo file's "Non-Negotiable User Requirements" section - ensure ALL requirements are met
      2. If any requirements not met: update todo list and `workflow-cli --project [project-name] --step 4`
      3. Run the application in production mode (non-test mode) exactly as end users would
      4. Manually verify ALL functionality works in the production environment
      5. Test critical user workflows end-to-end in production mode. Make sure not to use any mocks and use live API endpoints. Just make sure to reverse any changes that would affect production data.
      6. Update todo file with final status
      7. Final commit and push
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 8
    title: "Branch Management Decision"
    content: |
      **WAIT FOR USER INSTRUCTION** before proceeding:
      
      First identify the main branch:
      1. `git branch -r --sort=-committerdate | head -5` (find most active branch)
      2. Usually main, master, or develop
      
      Ask user: "Should I merge this branch into [main-branch] and delete the feature branch?"
      
      If YES:
      1. `git checkout [main-branch]`
      2. `git pull origin [main-branch]`
      3. `git merge [feature-branch]`
      4. `git push origin [main-branch]`
      5. `git branch -d [feature-branch]`
      6. `git push origin --delete [feature-branch]`
      
      If NO: Leave branch as-is for manual review
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 9
    title: "Clean Project State"
    content: |
      Final cleanup step:
      
      1. Clean project state: `workflow-cli --project [project-name] --clean`
      2. Remove worktree:
         ```
         cd ../..
         git worktree remove worktrees/[project-name]-YYYYMMDD
         ```
      
      **Workflow Complete:** Project finished and state cleaned up
    mandatory: true

global_rules:
  - title: "Core Principles"
    content: |
      1. Simplify ruthlessly, test what matters
      2. Never proceed with failing tests
      3. Use batch APIs instead of loops
      4. Check existing code/todos first
      5. Ask before commits/final submissions
      6. Update todos/YYYYMMDD-[project]-todo.md with timestamps in format: [HH:MM] using ‚úÖüïíüî•
      7. MUST complete entire todo list autonomously - never stop until done (only ask for help if stuck on 2FA)
      8. Search the web as needed for documentation and solutions
      9. Keep directory structure clean: place new files in appropriate directories (cli_tools/, tests/, docs/, data/, scripts/, etc.)
      10. ALWAYS read debug logs before attempting any fix - never make blind fixes
      11. If dealing with anything GUI related, take screenshots regularly to understand what's going on


  - title: "Never Do"
    content: |
      - NEVER proceed with failing tests
      - NEVER mark complete without E2E testing
      - NEVER attempt fixes without reading debug logs first
      - NEVER try to fix GUI issues without taking screenshots
      - NEVER give up - find another way

  - title: "Terminal Command Limits"
    content: |
      - Commands timeout after 2 minutes - run long tasks in background: `cmd > /tmp/log.txt 2>&1 &`
      - Never use sleep > 119 seconds

  - title: "Automation Tools"
    content: |
      - Check available MCP tools and resources
      - Use official APIs first, selenium-cli browser only for unsupported features
      - selenium-cli browser: unblock auth, get API keys, one-time setup tasks
      - Take screenshots when curious/stuck: screenshot-cli tool
      - Last resort for GUI tasks: desktop-automation-cli


quick_reference:
  essential_commands:
    - "workflow-cli --project [name] --next"
    - "workflow-cli --project [name] --sub-task-next"
    - "workflow-cli --project [name] --clean"

emergency_procedures:
  - title: "Rollback"
    commands:
      - "git reset --hard [commit-hash]"
      - "git push --force-with-lease origin HEAD"
  
  - title: "Session Recovery"
    commands:
      - "git branch --show-current"
      - "git status"
      - "Check todos/YYYYMMDD-[project]-todo.md for progress"
      - "Run tests"
      - "Continue with commits"