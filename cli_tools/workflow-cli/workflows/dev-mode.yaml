name: "Dev Mode"
description: "Development workflow - simplified step-by-step process"
steps:
  - number: 1
    title: "Announce Dev Mode & Start Git Workflow"
    content: |
      MANDATORY first response:
      ⚡ **DEV MODE ACTIVATED**
      
      I'm operating under DEV MODE rules: Simplify ruthlessly, test what matters, and create modern, maintainable code.
      
      **⚠️ IMPORTANT: DO NOT start implementation yet. This is the planning phase.**
      
      **Check for existing todo:**
      If continuing work on existing todo file in `todos/YYYYMMDD-[project]-todo.md`, skip to step 4 and update existing todo list to match the todo list structure (if needed).
      
      **For new work, execute git setup IMMEDIATELY:**
      1. Create branch:
         ```
         git checkout -b [project-name]-YYYYMMDD
         git push -u origin [project-name]-YYYYMMDD
         ```
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 2
    title: "Consult Knowledge Base"
    content: |
      **⚠️ IMPORTANT: This is research phase - DO NOT implement anything yet.**
      
      Execute these research steps:
      
      **Local Context:**
      1. Search codebase for similar implementations
      2. Find existing code to reuse/extend (prioritize ai_cache_utils.js for AI calls)
      3. Check config/.env for existing API keys before asking user
      4. Search todos/ directory for previous learnings
      
      **Web Context:**
      5. Search web for best practices on the technology/framework
      6. Find latest API documentation
      7. Look for common patterns and pitfalls
      8. Check for batch operation support in APIs
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 3
    title: "Apply Musk's 5-Step Process"
    content: |
      **⚠️ IMPORTANT: Still in planning phase - NO implementation yet.**
      
      Apply this analysis to the current task:
      1. Question: Is this requirement necessary?
      2. Delete: What can we remove?
      3. Simplify: How can we make it simpler?
      4. Accelerate: Speed up only after simplifying
      5. Automate: Automate only proven processes
      
      Example:
      - User wants caching → Do ALL endpoints need it?
      - Can we use in-memory instead of Redis?
      - Test the simple solution first
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 4
    title: "Plan with Test Gates and Todo Management"
    content: |
      **⚠️ IMPORTANT: Final planning step - DO NOT implement yet!**
      
      **API Keys Check:**
      If any required API keys are missing from config/.env:
      - Use Selenium browser automation to obtain them (login to service, navigate to API settings)
      - Example: `mcp__selenium__start_browser` → navigate to API dashboard → copy keys
      
      Create this incremental plan structure:
      1. Build feature A
      2. Write E2E test for A
      3. TEST GATE: Run test - MUST PASS → `workflow-cli --project [project-name] --sub-task-next`
      4. Commit with test status: `git commit -m "feat: add X - tests: 5/5 passed"`
      5. Only then: Build feature B
      6. Write E2E test for B
      7. TEST GATE: Run test - MUST PASS → `workflow-cli --project [project-name] --sub-task-next`
      8. Commit with test status
      
      **Create Todo File:** `todos/YYYYMMDD-[project-name]-todo.md`
      
      **Todo List Structure Example:**
      ```markdown
      # YYYYMMDD-[project-name]-todo.md
      Last updated: 2025-06-25 14:32:15
      
      ## Tasks
      ✅ [14:15] Set up project structure and git branch
      ✅ [14:22] Implement user authentication module
      ✅ [14:25] Write E2E test for authentication
      ✅ [14:26] TEST GATE PASSED → `workflow-cli --project [project-name] --sub-task-next`
      🕒 [14:32] Add caching layer for API responses
      🕒 Write E2E test for caching
      🕒 TEST GATE → `workflow-cli --project [project-name] --sub-task-next`
      🕒 Implement batch processing for data updates
      🕒 Write E2E test for batch processing
      🕒 TEST GATE → `workflow-cli --project [project-name] --sub-task-next`
      🕒 Final testing and cleanup
      🕒 Run `workflow-cli --project [project-name] --next`
      
      ## Notes
      🔥 BREAKTHROUGH [14:28]: Found we can use existing auth middleware instead of building from scratch
      ```
      
      **IMPORTANT:** The FINAL item in your todo list must be:
      `🕒 Run workflow-cli --project [project-name] --next`
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 5
    title: "Implement One Piece at a Time"
    content: |
      **NOW YOU CAN START IMPLEMENTATION!**
      
      Execute these implementation steps:
      1. Work through your todo list from step 4
      2. Write one logical unit of functionality
      3. Write E2E test for that functionality
      4. Run test and verify it passes
      5. After test passes → `workflow-cli --project [project-name] --sub-task-next`
      6. Update todo file with progress and timestamps
      7. ONLY if passed → Move to next feature
      
      **Remember:**
      - Update timestamps in format [HH:MM] for each task/note
      - Mark completed tasks with ✅
      - Log breakthroughs with 🔥 BREAKTHROUGH
      - MUST complete entire todo list autonomously
      - Never give up, keep trying until done
      
      **Next Step:** Continue until all tasks complete, then run final `--next` from todo
    mandatory: true

  - number: 6
    title: "Clean Up Environment"
    content: |
      Before final commits, clean up temporary files:
      1. Delete test logs: `rm -f *.log test.log`
      2. Remove temporary files: `rm -f temp_* tmp_*`
      3. Clean up debug files: `rm -f debug_* *.debug`
      4. Remove unneeded test artifacts
      5. Verify only necessary files remain
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 7
    title: "Final Verification"
    content: |
      Execute these final steps before marking complete:
      1. Run full test suite ONCE
      2. Verify all tests pass
      3. Update todo file with final status
      4. Final commit and push
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 8
    title: "Branch Management Decision"
    content: |
      **WAIT FOR USER INSTRUCTION** before proceeding:
      
      First identify the main branch:
      1. `git branch -r --sort=-committerdate | head -5` (find most active branch)
      2. Usually main, master, or develop
      
      Ask user: "Should I merge this branch into [main-branch] and delete the feature branch?"
      
      If YES:
      1. `git checkout [main-branch]`
      2. `git pull origin [main-branch]`
      3. `git merge [feature-branch]`
      4. `git push origin [main-branch]`
      5. `git branch -d [feature-branch]`
      6. `git push origin --delete [feature-branch]`
      
      If NO: Leave branch as-is for manual review
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 9
    title: "Clean Project State"
    content: |
      Final cleanup step:
      
      Clean project state: `workflow-cli --project [project-name] --clean`
      
      **Workflow Complete:** Project finished and state cleaned up
    mandatory: true

global_rules:
  - title: "Core Principles"
    content: |
      1. Simplify ruthlessly, test what matters
      2. Never proceed with failing tests
      3. Use batch APIs instead of loops
      4. Check existing code/todos first
      5. Ask before commits/final submissions
      6. Update todos/YYYYMMDD-[project]-todo.md with timestamps in format: [HH:MM] using ✅🕒🔥
      7. MUST complete entire todo list autonomously - never stop until done (only ask for help if stuck on 2FA)
      8. Search the web as needed for documentation and solutions
      9. Keep directory structure clean: place new files in appropriate directories (cli_tools/, tests/, docs/, data/, scripts/, etc.)
      10. ALWAYS read debug logs before attempting any fix - never make blind fixes
      11. If dealing with anything GUI related, take screenshots regularly to understand what's going on


  - title: "Never Do"
    content: |
      - NEVER proceed with failing tests
      - NEVER mark complete without E2E testing
      - NEVER attempt fixes without reading debug logs first
      - NEVER try to fix GUI issues without taking screenshots
      - NEVER give up - find another way

  - title: "Terminal Command Limits"
    content: |
      - Commands timeout after 2 minutes - run long tasks in background: `cmd > /tmp/log.txt 2>&1 &`
      - Never use sleep > 119 seconds

  - title: "Automation Tools"
    content: |
      - Check available MCP tools and resources
      - Use official APIs first, selenium browser only for unsupported features
      - Selenium browser: unblock auth, get API keys, one-time setup tasks
      - Take screenshots when curious/stuck: screenshot-cli tool
      - Last resort for GUI tasks: desktop-automation-cli


quick_reference:
  essential_commands:
    - "workflow-cli --project [name] --next"
    - "workflow-cli --project [name] --sub-task-next"
    - "workflow-cli --project [name] --clean"

emergency_procedures:
  - title: "Rollback"
    commands:
      - "git reset --hard [commit-hash]"
      - "git push --force-with-lease origin HEAD"
  
  - title: "Session Recovery"
    commands:
      - "git branch --show-current"
      - "git status"
      - "Check todos/YYYYMMDD-[project]-todo.md for progress"
      - "Run tests"
      - "Continue with commits"