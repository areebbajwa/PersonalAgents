name: "Dev Mode"
description: "Development workflow - simplified step-by-step process"
steps:
  - number: 1
    name: "announce"
    title: "Announce Dev Mode"
    content: |
      MANDATORY first response:
      ‚ö° **DEV MODE ACTIVATED**
      
      I'm operating under DEV MODE rules: Simplify ruthlessly, test what matters, and create modern, maintainable code.
      
      {% if task %}
      **Task:** {{ task }}
      {% endif %}
      
      **‚ö†Ô∏è IMPORTANT: DO NOT start implementation yet. This is the planning phase.**
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 2
    name: "setup"
    title: "Check Todo Status & Git Setup"
    content: |
      **ACTION DECISION TREE:**
      ```yaml
      check_todo:
        - action: "Look for todo file matching: ~/PersonalAgents/todos/YYYYMMDD-[project]-todo.md"
        - if_exists:
            - action: "Read existing todo file"
            - check_worktree:
                - action: "Check if corresponding worktree exists: worktrees/[project-name]-YYYYMMDD"
                - if_worktree_exists:
                    - action: "Switch to existing worktree:"
                      commands:
                        - "cd worktrees/[project-name]-YYYYMMDD"
                    - action: "Continue with existing work from current state"
                    - next: "Run workflow-cli --project [project-name] --next"
                - if_worktree_not_exists:
                    - action: "Recreate worktree for continuing work:"
                      commands:
                        - "mkdir -p worktrees"
                        - "git worktree add worktrees/[project-name]-YYYYMMDD -b [project-name]-YYYYMMDD"
                        - "cd worktrees/[project-name]-YYYYMMDD"
                        - "rm -rf cli_tools todos"  # Remove directories from worktree
                        - "ln -s ~/PersonalAgents/cli_tools cli_tools"  # Symlink to main cli_tools
                        - "ln -s ~/PersonalAgents/todos todos"  # Symlink to main todos
                    - action: "Continue with existing work from todo"
                    - next: "Run workflow-cli --project [project-name] --next"
        - if_not_exists:
            - check_worktree:
                - action: "Check if already in a worktree (path contains /worktrees/)"
                - if_in_worktree:
                    - action: "Use existing worktree (created by yolo command)"
                    - next: "Run workflow-cli --project [project-name] --next"
                - if_not_in_worktree:
                    - action: "Create new git worktree:"
                      commands:
                        - "mkdir -p worktrees"
                        - "git worktree add worktrees/[project-name]-YYYYMMDD -b [project-name]-YYYYMMDD"
                        - "cd worktrees/[project-name]-YYYYMMDD"
                        - "rm -rf cli_tools todos"  # Remove directories from worktree
                        - "ln -s ~/PersonalAgents/cli_tools cli_tools"  # Symlink to main cli_tools
                        - "ln -s ~/PersonalAgents/todos todos"  # Symlink to main todos
                        - "git push -u origin [project-name]-YYYYMMDD"
                    - action: "Note: cli_tools and todos are symlinked to main repo for centralized changes"
                    - next: "Run workflow-cli --project [project-name] --next"
      ```
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 3
    name: "research"
    title: "Consult Knowledge Base"
    content: |
      **‚ö†Ô∏è IMPORTANT: This is research phase - DO NOT implement anything yet.**
      
      Execute these research steps:
      
      **Local Context:**
      1. Search codebase for similar implementations
      2. Find existing code to reuse/extend (prioritize ai_cache_utils.js for AI calls)
      3. Check config/.env for existing API keys before asking user
      4. Search ~/PersonalAgents/todos/ directory for previous learnings
      
      **Web Context:**
      5. Search web for best practices on the technology/framework
      6. Find latest API documentation
      7. Look for common patterns and pitfalls
      8. Check for batch operation support in APIs
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 4
    name: "simplify"
    title: "Apply Musk's 5-Step Process"
    content: |
      **‚ö†Ô∏è IMPORTANT: Still in planning phase - NO implementation yet.**
      
      **CRITICAL:** Review Non-Negotiable User Requirements from todo file - NEVER violate these when simplifying.
      
      Apply this analysis to the current task:
      1. Question: Is this requirement necessary?
      2. Delete: What can we remove?
      3. Simplify: How can we make it simpler?
      4. Accelerate: Speed up only after simplifying
      5. Automate: Automate only proven processes
      
      Example:
      - User wants caching ‚Üí Do ALL endpoints need it?
      - Can we use in-memory instead of Redis?
      - Test the simple solution first
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 5
    name: "plan"
    title: "Plan with Test Gates and Todo Management"
    content: |
      **‚ö†Ô∏è IMPORTANT: Final planning step - DO NOT implement yet!**
      
      **CONDITIONAL CHECKS:**
      ```yaml
      cli_tool_check:
        - condition: "Creating a CLI tool?"
        - if_true: "Include steps from: /Volumes/ExtremeSSD/PersonalAgents/PersonalAgents/cli_tools/CLI_TOOL_DESIGN_GUIDE.md"
      
      api_keys_check:
        - condition: "Required API keys missing from config/.env?"
        - if_true:
            - action: "Use selenium-cli browser automation"
            - steps:
                - "selenium-cli start"
                - "Navigate to API dashboard"
                - "Copy API keys"
                - "Add to config/.env"
      ```
      
      **CREATE INCREMENTAL PLAN:**
      1. Build feature A
      2. Write E2E test for A
      3. TEST GATE: Run test - MUST PASS
      4. Mark test passed: `workflow-cli --project [project-name] --sub-task-next`
      5. Commit with test status: `git commit -m "feat: add X - tests: 5/5 passed"`
      6. Only then: Build feature B
      7. Write E2E test for B
      8. TEST GATE: Run test - MUST PASS
      9. Mark test passed: `workflow-cli --project [project-name] --sub-task-next`
      10. Commit with test status
      
      **TODO FILE MANAGEMENT:**
      ```yaml
      todo_file:
        - action: "Create or update file"
        - path: "~/PersonalAgents/todos/YYYYMMDD-[project-name]-todo.md"
        - structure:
            - "# YYYYMMDD-[project-name]-todo.md"
            - "Last updated: [timestamp]"
            - "## Non-Negotiable User Requirements: {% if task %}{{ task }}{% else %}[exact user words]{% endif %}"
            - "## Context Discovery"
            - "## Tasks (with timestamps and status icons)"
            - "## Notes (with breakthrough markers)"
        - final_task: "üïí Run workflow-cli --project [project-name] --next"
      ```
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 6
    name: "implement"
    title: "Implement One Piece at a Time"
    content: |
      **NOW YOU CAN START IMPLEMENTATION!**
      
      Execute these implementation steps:
      1. Work through your todo list from step 5
      2. Write one logical unit of functionality
      3. Write E2E test for that functionality
      4. Run test and verify it passes
      5. After test passes ‚Üí `workflow-cli --project [project-name] --sub-task-next`
      6. Update todo file with progress and timestamps
      7. ONLY if passed ‚Üí Move to next feature
      
      **Remember:**
      - Update timestamps in format [HH:MM] for each task/note
      - Mark completed tasks with ‚úÖ
      - Log breakthroughs with üî• BREAKTHROUGH
      - MUST complete entire todo list autonomously
      - Never give up, keep trying until done
      
      **Next Step:** Continue until all tasks complete, then run final `--next` from todo
    mandatory: true

  - number: 7
    name: "cleanup"
    title: "Clean Up Environment"
    content: |
      **Git Status Cleanup:**
      1. Run `git status` and review all changes
      2. Check Non-Negotiable User Requirements from todo file
      3. Remove any code/tools/scripts/tests NOT relevant to requirements:
         - Unneeded helper scripts
         - Test files for removed features
         - Documentation for deleted functionality
      4. Update/delete conflicting docs/references in other files based on changes
      5. Ensure .gitignore is up-to-date
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 8
    name: "verify"
    title: "Final Verification"
    content: |
      **VERIFICATION DECISION TREE:**
      ```yaml
      verify_requirements:
        - action: "Check todo file's Non-Negotiable User Requirements"
        - if_all_met:
            - action: "Update todo file with final status"
            - action: "Final commit and push"
            - next: "Run workflow-cli --project [project-name] --next"
        - if_not_met:
            - action: "Update todo list with missing requirements"
            - action: "Jump back to step 6 (implementation)"
            - command: "workflow-cli --project [project-name] --set-step 6"
      ```
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 9
    name: "merge"
    title: "Branch Management - Auto Merge"
    content: |
      **Automatically merge to main branch:**
      
      First identify the main branch:
      1. `git branch -r --sort=-committerdate | head -5` (find most active branch)
      2. Usually main, master, or develop
      
      Execute merge automatically:
      1. `git checkout [main-branch]`
      2. `git pull origin [main-branch]`
      3. `git merge [feature-branch]`
      4. `git push origin [main-branch]`
      5. `git branch -d [feature-branch]`
      6. `git push origin --delete [feature-branch]`
      7. If created a CLI tool: `./scripts/setup-global-cli-tools.sh`
      
      **Next Step:** Run `workflow-cli --project [project-name] --next` to continue
    mandatory: true

  - number: 10
    name: "finish"
    title: "Clean Project State"
    content: |
      Final cleanup step:
      
      1. Clean project state: `workflow-cli --project [project-name] --clean`
      2. Discard symlink changes and remove worktree:
         ```
         pwd  # Note current directory for cleanup
         git checkout -- cli_tools todos  # Discard symlink changes
         cd ../..
         git worktree remove worktrees/[project-name]-YYYYMMDD
         rm -rf worktrees/[project-name]-YYYYMMDD  # Delete folder if still exists
         ```
      
      **Workflow Complete:** Project finished and state cleaned up
      
      {% if spawned %}
      **Spawned workflow complete. Exiting Claude...**
      
      Run this command to exit:
      ```
      exit
      ```
      {% endif %}
    mandatory: true

global_rules:
  - title: "Core Principles"
    content: |
      1. Simplify ruthlessly, test what matters
      2. Never proceed with failing tests
      3. Use batch APIs instead of loops
      4. Check existing code/todos first
      5. Ask before commits/final submissions
      6. Update ~/PersonalAgents/todos/YYYYMMDD-[project]-todo.md with timestamps in format: [HH:MM] using ‚úÖüïíüî•
      7. MUST complete entire todo list autonomously - never stop until done (only ask for help if stuck on 2FA)
      8. NEVER take shortcuts when completing todo list - fix whatever is broken as needed so future tasks are easier
      9. NEVER mark todo items complete hastily - if you realize you marked something complete prematurely, immediately undo it
      10. Search the web as needed for documentation and solutions
      11. Keep directory structure clean: place new files in appropriate directories (cli_tools/, tests/, docs/, data/, scripts/, etc.)
      12. ALWAYS read debug logs before attempting any fix - never make blind fixes
      13. If dealing with anything GUI related, take screenshots regularly to understand what's going on
      14. NO FALLBACK CODE - Keep logic simple and direct, avoid complex fallback patterns
      15. ALWAYS find root cause of issues and fix it - never add band-aid fixes or fallbacks
      16. Use GitHub/npm libraries instead of reinventing the wheel - search for existing solutions first
      17. If stuck after significant effort and things are messy - first search web for best practices, then simplify and rebuild from scratch instead of fixing broken code
      18. Never duplicate any code or create any redundancy. Update/delete/refactor as needed.

  - title: "UpdateTodo Command Handler"
    content: |
      **WHEN USER SAYS "updatetodo":**
      ```yaml
      updatetodo_handler:
        - action: "Add new requirement to Non-Negotiable User Requirements section of current todo file"
        - action: "Save the updated todo file"
        - action: "Jump to 'plan' step (step 5)"
        - command: "workflow-cli --project [project-name] --set-step 5"
        - reason: "The 'plan' step will re-evaluate the plan with the new requirements"
      ```


  - title: "Never Do"
    content: |
      - NEVER proceed with failing tests
      - NEVER mark complete without E2E testing
      - NEVER mark todo items complete hastily - undo immediately if done prematurely
      - NEVER attempt fixes without reading debug logs first
      - NEVER try to fix GUI issues without taking screenshots
      - NEVER add band-aid fixes or fallbacks - always find and fix root cause
      - NEVER take shortcuts when completing todo list - fix problems properly
      - NEVER give up - find another way

  - title: "Terminal Command Limits"
    content: |
      - Commands timeout after 2 minutes - run long tasks in background: `cmd > /tmp/log.txt 2>&1 &`
      - Never use sleep > 119 seconds

  - title: "Automation Tools"
    content: |
      - Check available MCP tools and resources
      - Use official APIs first, selenium-cli browser only for unsupported features
      - selenium-cli browser: unblock auth, get API keys, one-time setup tasks
      - Take screenshots when curious/stuck: screenshot-cli tool
      - Use record-cli to record screen and send to AI for analysis if screenshots don't suffice
      - Last resort for GUI tasks: desktop-automation-cli


quick_reference:
  essential_commands:
    - "workflow-cli --project [name] --mode dev --step 1"
    - "workflow-cli --project [name] --next"
    - "workflow-cli --project [name] --sub-task-next"
    - "workflow-cli --project [name] --remind-rules"
    - "workflow-cli --project [name] --clean"

emergency_procedures:
  - title: "Rollback"
    commands:
      - "git reset --hard [commit-hash]"
      - "git push --force-with-lease origin HEAD"
  
  - title: "Session Recovery"
    commands:
      - "git branch --show-current"
      - "git status"
      - "Check ~/PersonalAgents/todos/YYYYMMDD-[project]-todo.md for progress"
      - "Run tests"
      - "Continue with commits"