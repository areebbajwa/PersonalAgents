{
  "numStartups": 118,
  "installMethod": "local",
  "autoUpdates": true,
  "theme": "dark-ansi",
  "tipsHistory": {
    "ide-hotkey": 81,
    "new-user-warmup": 5,
    "shift-enter": 114,
    "memory-command": 38,
    "theme-command": 90,
    "prompt-queue": 44,
    "enter-to-steer-in-relatime": 94,
    "todo-list": 95,
    "# for memory": 118,
    "install-github-app": 100,
    "permissions": 104,
    "drag-and-drop-images": 103,
    "double-esc": 98,
    "continue": 103,
    "custom-commands": 115,
    "shift-tab": 104,
    "git-worktrees": 84,
    "vscode-command-install": 117
  },
  "memoryUsageCount": 3,
  "promptQueueUseCount": 172,
  "mcpServers": {},
  "userID": "96200396462dc1a54dcd7bf4ed2806506483ec7ffab4ccd45f138f1896711cd6",
  "fallbackAvailableWarningThreshold": 0.5,
  "firstStartTime": "2025-06-24T18:12:23.289Z",
  "oauthAccount": {
    "accountUuid": "a9ecdc64-7ff6-4fd5-bec8-b13d6be1305c",
    "emailAddress": "areebb@gmail.com",
    "organizationUuid": "6bf9b879-e06c-4736-885f-392714701df8",
    "organizationRole": "admin",
    "workspaceRole": null,
    "organizationName": "Areeb Bajwa"
  },
  "shiftEnterKeyBindingInstalled": true,
  "hasCompletedOnboarding": true,
  "lastOnboardingVersion": "1.0.33",
  "bypassPermissionsModeAccepted": true,
  "subscriptionNoticeCount": 0,
  "hasAvailableSubscription": false,
  "cachedChangelog": "# Changelog\n\n## 1.0.38\n\n- Released hooks. Special thanks to community input in https://github.com/anthropics/claude-code/issues/712. Docs: https://docs.anthropic.com/en/docs/claude-code/hooks\n\n## 1.0.37\n\n- Remove ability to set `Proxy-Authorization` header via ANTHROPIC_AUTH_TOKEN or apiKeyHelper\n\n## 1.0.36\n\n- Web search now takes today's date into context\n- Fixed a bug where stdio MCP servers were not terminating properly on exit\n\n## 1.0.35\n\n- Added support for MCP OAuth Authorization Server discovery\n\n## 1.0.34\n\n- Fixed a memory leak causing a MaxListenersExceededWarning message to appear\n\n## 1.0.33\n\n- Improved logging functionality with session ID support\n- Added undo functionality (Ctrl+Z and vim 'u' command)\n- Improvements to plan mode\n\n## 1.0.32\n\n- Updated loopback config for litellm\n- Added forceLoginMethod setting to bypass login selection screen\n\n## 1.0.31\n\n- Fixed a bug where ~/.claude.json would get reset when file contained invalid JSON\n\n## 1.0.30\n\n- Custom slash commands: Run bash output, @-mention files, enable thinking with thinking keywords\n- Improved file path autocomplete with filename matching\n- Added timestamps in Ctrl-r mode and fixed Ctrl-c handling\n- Enhanced jq regex support for complex filters with pipes and select\n\n## 1.0.29\n\n- Improved CJK character support in cursor navigation and rendering\n\n## 1.0.28\n\n- Slash commands: Fix selector display during history navigation\n- Resizes images before upload to prevent API size limit errors\n- Added XDG_CONFIG_HOME support to configuration directory\n- Performance optimizations for memory usage\n- New attributes (terminal.type, language) in OpenTelemetry logging\n\n## 1.0.27\n\n- Streamable HTTP MCP servers are now supported\n- Remote MCP servers (SSE and HTTP) now support OAuth\n- MCP resources can now be @-mentioned\n- /resume slash command to switch conversations within Claude Code\n\n## 1.0.25\n\n- Slash commands: moved \"project\" and \"user\" prefixes to descriptions\n- Slash commands: improved reliability for command discovery\n- Improved support for Ghostty\n- Improved web search reliability\n\n## 1.0.24\n\n- Improved /mcp output\n- Fixed a bug where settings arrays got overwritten instead of merged\n\n## 1.0.23\n\n- Released TypeScript SDK: import @anthropic-ai/claude-code to get started\n- Released Python SDK: pip install claude-code-sdk to get started\n\n## 1.0.22\n\n- SDK: Renamed `total_cost` to `total_cost_usd`\n\n## 1.0.21\n\n- Improved editing of files with tab-based indentation\n- Fix for tool_use without matching tool_result errors\n- Fixed a bug where stdio MCP server processes would linger after quitting Claude Code\n\n## 1.0.18\n\n- Added --add-dir CLI argument for specifying additional working directories\n- Added streaming input support without require -p flag\n- Improved startup performance and session storage performance\n- Added CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR environment variable to freeze working directory for bash commands\n- Added detailed MCP server tools display (/mcp)\n- MCP authentication and permission improvements\n- Added auto-reconnection for MCP SSE connections on disconnect\n- Fixed issue where pasted content was lost when dialogs appeared\n\n## 1.0.17\n\n- We now emit messages from sub-tasks in -p mode (look for the parent_tool_use_id property)\n- Fixed crashes when the VS Code diff tool is invoked multiple times quickly\n- MCP server list UI improvements\n- Update Claude Code process title to display \"claude\" instead of \"node\"\n\n## 1.0.11\n\n- Claude Code can now also be used with a Claude Pro subscription\n- Added /upgrade for smoother switching to Claude Max plans\n- Improved UI for authentication from API keys and Bedrock/Vertex/external auth tokens\n- Improved shell configuration error handling\n- Improved todo list handling during compaction\n\n## 1.0.10\n\n- Added markdown table support\n- Improved streaming performance\n\n## 1.0.8\n\n- Fixed Vertex AI region fallback when using CLOUD_ML_REGION\n- Increased default otel interval from 1s -> 5s\n- Fixed edge cases where MCP_TIMEOUT and MCP_TOOL_TIMEOUT weren't being respected\n- Fixed a regression where search tools unnecessarily asked for permissions\n- Added support for triggering thinking non-English languages\n- Improved compacting UI\n\n## 1.0.7\n\n- Renamed /allowed-tools -> /permissions\n- Migrated allowedTools and ignorePatterns from .claude.json -> settings.json\n- Deprecated claude config commands in favor of editing settings.json\n- Fixed a bug where --dangerously-skip-permissions sometimes didn't work in --print mode\n- Improved error handling for /install-github-app\n- Bugfixes, UI polish, and tool reliability improvements\n\n## 1.0.6\n\n- Improved edit reliability for tab-indented files\n- Respect CLAUDE_CONFIG_DIR everywhere\n- Reduced unnecessary tool permission prompts\n- Added support for symlinks in @file typeahead\n- Bugfixes, UI polish, and tool reliability improvements\n\n## 1.0.4\n\n- Fixed a bug where MCP tool errors weren't being parsed correctly\n\n## 1.0.1\n\n- Added `DISABLE_INTERLEAVED_THINKING` to give users the option to opt out of interleaved thinking.\n- Improved model references to show provider-specific names (Sonnet 3.7 for Bedrock, Sonnet 4 for Console)\n- Updated documentation links and OAuth process descriptions\n\n## 1.0.0\n\n- Claude Code is now generally available\n- Introducing Sonnet 4 and Opus 4 models\n\n## 0.2.125\n\n- Breaking change: Bedrock ARN passed to `ANTHROPIC_MODEL` or `ANTHROPIC_SMALL_FAST_MODEL` should no longer contain an escaped slash (specify `/` instead of `%2F`)\n- Removed `DEBUG=true` in favor of `ANTHROPIC_LOG=debug`, to log all requests\n\n## 0.2.117\n\n- Breaking change: --print JSON output now returns nested message objects, for forwards-compatibility as we introduce new metadata fields\n- Introduced settings.cleanupPeriodDays\n- Introduced CLAUDE_CODE_API_KEY_HELPER_TTL_MS env var\n- Introduced --debug mode\n\n## 0.2.108\n\n- You can now send messages to Claude while it works to steer Claude in real-time\n- Introduced BASH_DEFAULT_TIMEOUT_MS and BASH_MAX_TIMEOUT_MS env vars\n- Fixed a bug where thinking was not working in -p mode\n- Fixed a regression in /cost reporting\n- Deprecated MCP wizard interface in favor of other MCP commands\n- Lots of other bugfixes and improvements\n\n## 0.2.107\n\n- CLAUDE.md files can now import other files. Add @path/to/file.md to ./CLAUDE.md to load additional files on launch\n\n## 0.2.106\n\n- MCP SSE server configs can now specify custom headers\n- Fixed a bug where MCP permission prompt didn't always show correctly\n\n## 0.2.105\n\n- Claude can now search the web\n- Moved system & account status to /status\n- Added word movement keybindings for Vim\n- Improved latency for startup, todo tool, and file edits\n\n## 0.2.102\n\n- Improved thinking triggering reliability\n- Improved @mention reliability for images and folders\n- You can now paste multiple large chunks into one prompt\n\n## 0.2.100\n\n- Fixed a crash caused by a stack overflow error\n- Made db storage optional; missing db support disables --continue and --resume\n\n## 0.2.98\n\n- Fixed an issue where auto-compact was running twice\n\n## 0.2.96\n\n- Claude Code can now also be used with a Claude Max subscription (https://claude.ai/upgrade)\n\n## 0.2.93\n\n- Resume conversations from where you left off from with \"claude --continue\" and \"claude --resume\"\n- Claude now has access to a Todo list that helps it stay on track and be more organized\n\n## 0.2.82\n\n- Added support for --disallowedTools\n- Renamed tools for consistency: LSTool -> LS, View -> Read, etc.\n\n## 0.2.75\n\n- Hit Enter to queue up additional messages while Claude is working\n- Drag in or copy/paste image files directly into the prompt\n- @-mention files to directly add them to context\n- Run one-off MCP servers with `claude --mcp-config <path-to-file>`\n- Improved performance for filename auto-complete\n\n## 0.2.74\n\n- Added support for refreshing dynamically generated API keys (via apiKeyHelper), with a 5 minute TTL\n- Task tool can now perform writes and run bash commands\n\n## 0.2.72\n\n- Updated spinner to indicate tokens loaded and tool usage\n\n## 0.2.70\n\n- Network commands like curl are now available for Claude to use\n- Claude can now run multiple web queries in parallel\n- Pressing ESC once immediately interrupts Claude in Auto-accept mode\n\n## 0.2.69\n\n- Fixed UI glitches with improved Select component behavior\n- Enhanced terminal output display with better text truncation logic\n\n## 0.2.67\n\n- Shared project permission rules can be saved in .claude/settings.json\n\n## 0.2.66\n\n- Print mode (-p) now supports streaming output via --output-format=stream-json\n- Fixed issue where pasting could trigger memory or bash mode unexpectedly\n\n## 0.2.63\n\n- Fixed an issue where MCP tools were loaded twice, which caused tool call errors\n\n## 0.2.61\n\n- Navigate menus with vim-style keys (j/k) or bash/emacs shortcuts (Ctrl+n/p) for faster interaction\n- Enhanced image detection for more reliable clipboard paste functionality\n- Fixed an issue where ESC key could crash the conversation history selector\n\n## 0.2.59\n\n- Copy+paste images directly into your prompt\n- Improved progress indicators for bash and fetch tools\n- Bugfixes for non-interactive mode (-p)\n\n## 0.2.54\n\n- Quickly add to Memory by starting your message with '#'\n- Press ctrl+r to see full output for long tool results\n- Added support for MCP SSE transport\n\n## 0.2.53\n\n- New web fetch tool lets Claude view URLs that you paste in\n- Fixed a bug with JPEG detection\n\n## 0.2.50\n\n- New MCP \"project\" scope now allows you to add MCP servers to .mcp.json files and commit them to your repository\n\n## 0.2.49\n\n- Previous MCP server scopes have been renamed: previous \"project\" scope is now \"local\" and \"global\" scope is now \"user\"\n\n## 0.2.47\n\n- Press Tab to auto-complete file and folder names\n- Press Shift + Tab to toggle auto-accept for file edits\n- Automatic conversation compaction for infinite conversation length (toggle with /config)\n\n## 0.2.44\n\n- Ask Claude to make a plan with thinking mode: just say 'think' or 'think harder' or even 'ultrathink'\n\n## 0.2.41\n\n- MCP server startup timeout can now be configured via MCP_TIMEOUT environment variable\n- MCP server startup no longer blocks the app from starting up\n\n## 0.2.37\n\n- New /release-notes command lets you view release notes at any time\n- `claude config add/remove` commands now accept multiple values separated by commas or spaces\n\n## 0.2.36\n\n- Import MCP servers from Claude Desktop with `claude mcp add-from-claude-desktop`\n- Add MCP servers as JSON strings with `claude mcp add-json <n> <json>`\n\n## 0.2.34\n\n- Vim bindings for text input - enable with /vim or /config\n\n## 0.2.32\n\n- Interactive MCP setup wizard: Run \"claude mcp add\" to add MCP servers with a step-by-step interface\n- Fix for some PersistentShell issues\n\n## 0.2.31\n\n- Custom slash commands: Markdown files in .claude/commands/ directories now appear as custom slash commands to insert prompts into your conversation\n- MCP debug mode: Run with --mcp-debug flag to get more information about MCP server errors\n\n## 0.2.30\n\n- Added ANSI color theme for better terminal compatibility\n- Fixed issue where slash command arguments weren't being sent properly\n- (Mac-only) API keys are now stored in macOS Keychain\n\n## 0.2.26\n\n- New /approved-tools command for managing tool permissions\n- Word-level diff display for improved code readability\n- Fuzzy matching for slash commands\n\n## 0.2.21\n\n- Fuzzy matching for /commands\n",
  "changelogLastFetched": 1751489899846,
  "lastReleaseNotesSeen": "1.0.38",
  "hasUsedBackslashReturn": true,
  "projects": {
    "/Volumes/ExtremeSSD/PersonalAgents/PersonalAgents": {
      "allowedTools": [],
      "history": [
        {
          "display": "read the dev-simple-hello- project. seems like the workflow state gets lost when we do the symlink. workflow-cli needs to use the absolute path starting with ~/PersonalAgents to store the state so that the worktree doesn't affect anything",
          "pastedContents": {}
        },
        {
          "display": "update @docs/tmux-claude-logging-migration.md ",
          "pastedContents": {}
        },
        {
          "display": "workflow-cli --project simple-hello --mode dev --step 1 --task 'create a very simple hello CLI tool that just prints Hello World' --spawned",
          "pastedContents": {}
        },
        {
          "display": "/exit ",
          "pastedContents": {}
        },
        {
          "display": "modify workflow-cli if needed",
          "pastedContents": {}
        },
        {
          "display": "go to the workflow clean step",
          "pastedContents": {}
        },
        {
          "display": "are you sure an environment variable instead of passing to workflow-cli?",
          "pastedContents": {}
        },
        {
          "display": "it shouldn't exit claude normally. only when started with the spawn-workflow-with-task",
          "pastedContents": {}
        },
        {
          "display": "never switch to it, that stops the agent in the main window. seems like it's running fine in the new window. are you sure the final steps in task mode and dev mode are correct such that the tmux window will auto-close when done?",
          "pastedContents": {}
        },
        {
          "display": "start devmode with task: 'create a simple hello CLI tool that greets the user'",
          "pastedContents": {}
        },
        {
          "display": "that seemed to start it and switch to it",
          "pastedContents": {}
        },
        {
          "display": "it created and closed the tmux window. try spawning workflow with sample task again",
          "pastedContents": {}
        },
        {
          "display": "ok now spawn a very simple worflow and make sure it closes the tmux window when done",
          "pastedContents": {}
        },
        {
          "display": "actually no i wanna be able to run yolo from any directory",
          "pastedContents": {}
        },
        {
          "display": "let's modify yolo as well",
          "pastedContents": {}
        },
        {
          "display": "read output of the workflow we started - seems it doesn't symlink properly. let's not create the worktree when running the yolo or spawn-workflow-with-task command. the workflow itself will create the worktree. ",
          "pastedContents": {}
        },
        {
          "display": "why does it say \"Error\" when workflow is still running? also when spawned with this script it should auto-close the tmux window when done",
          "pastedContents": {}
        },
        {
          "display": "it's started! i think you're checking the state file in the wrong place",
          "pastedContents": {}
        },
        {
          "display": "is the state file created on step 1? check workflow-cli. it started step 1 and then stopped. I think it's because just running the command doesn't tell it what needs to be created. see @cursor-rules/CLAUDE.md for how I start workflow. It's normally something like: \"start devmode with task: 'create a cli tool that does xyz'\". that gives the relevant context to claude code and it starts the workflow command by itself. ",
          "pastedContents": {}
        },
        {
          "display": "ai-monitor-cli successfully sends the Enter key that's required to start the workflow. see how it does it",
          "pastedContents": {}
        },
        {
          "display": "it sent the command but created a line break instead of sending the command with Enter",
          "pastedContents": {}
        },
        {
          "display": "doesn't seem like it sent the workflow-cli commands to the tmux window",
          "pastedContents": {}
        },
        {
          "display": "seems to be a blocking command that doesn't let anything else run while it's running",
          "pastedContents": {}
        },
        {
          "display": "dont update anything until we confirm it works as needed",
          "pastedContents": {}
        },
        {
          "display": "go ahead",
          "pastedContents": {}
        },
        {
          "display": "Creating worktree for project: test-cli-v2\nPreparing worktree (new branch 'test-cli-v2-20250702')\nHEAD is now at e86303b feat: enhance AI Monitor CLI with state management and logging improvements\nbranch 'test-cli-v2-20250702' set up to track 'origin/test-cli-v2-20250702'.\nStarting dev workflow in worktree: worktrees/test-cli-v2-20250702\nRunning: workflow-cli --project test-cli-v2 --mode dev --step 1\nI need permission to run the workflow command. Once you grant Bash access, I'll start the dev mode workflow for the test-cli-v2 project at step 1.\n\nWorkflow command sent. Check log at: /tmp/spawn-workflow-test-cli-v2-20250702-160448.log\nPress enter to close...\n",
          "pastedContents": {}
        },
        {
          "display": "[Pasted text #1 +55 lines]\\\n\\\nwhy can't you read the output? make it stream output to a file?",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "Creating worktree for project: test-cli\nPreparing worktree (new branch '-20250702')\nerror: unknown switch `2'\nusage: git branch [<options>] [-r | -a] [--merged] [--no-merged]\n   or: git branch [<options>] [-f] [--recurse-submodules] <branch-name> [<start-point>]\n   or: git branch [<options>] [-l] [<pattern>...]\n   or: git branch [<options>] [-r] (-d | -D) <branch-name>...\n   or: git branch [<options>] (-m | -M) [<old-branch>] <new-branch>\n   or: git branch [<options>] (-c | -C) [<old-branch>] <new-branch>\n   or: git branch [<options>] [-r | -a] [--points-at]\n   or: git branch [<options>] [-r | -a] [--format]\n\nGeneric options\n    -v, --verbose         show hash and subject, give twice for upstream branch\n    -q, --quiet           suppress informational messages\n    -t, --track[=(direct|inherit)]\n                          set branch tracking configuration\n    -u, --set-upstream-to <upstream>\n                          change the upstream info\n    --unset-upstream      unset the upstream info\n    --color[=<when>]      use colored output\n    -r, --remotes         act on remote-tracking branches\n    --contains <commit>   print only branches that contain the commit\n    --no-contains <commit>\n                          print only branches that don't contain the commit\n    --abbrev[=<n>]        use <n> digits to display object names\n\nSpecific git-branch actions:\n    -a, --all             list both remote-tracking and local branches\n    -d, --delete          delete fully merged branch\n    -D                    delete branch (even if not merged)\n    -m, --move            move/rename a branch and its reflog\n    -M                    move/rename a branch, even if target exists\n    -c, --copy            copy a branch and its reflog\n    -C                    copy a branch, even if target exists\n    -l, --list            list branch names\n    --show-current        show current branch name\n    --create-reflog       create the branch's reflog\n    --edit-description    edit the description for the branch\n    -f, --force           force creation, move/rename, deletion\n    --merged <commit>     print only branches that are merged\n    --no-merged <commit>  print only branches that are not merged\n    --column[=<style>]    list branches in columns\n    --sort <key>          field name to sort on\n    --points-at <object>  print only branches of the object\n    -i, --ignore-case     sorting and filtering are case insensitive\n    --recurse-submodules  recurse through submodules\n    --format <format>     format to use for the output\n\nzsh:cd:18: no such file or directory: worktrees/-20250702\nStarting dev workflow in worktree: worktrees/-20250702\nRunning: workflow-cli --project test-cli --mode dev --step 1\nzsh:26: command not found: claude\n\nWorkflow command sent. Press enter to close...\n"
            }
          }
        },
        {
          "display": "actually i want it to be able to spawn any mode, not just dev mode, so make it mode agnostic",
          "pastedContents": {}
        },
        {
          "display": "how about we create a new alias that does all of this",
          "pastedContents": {}
        },
        {
          "display": "i think yolo starts in interactive mode",
          "pastedContents": {}
        },
        {
          "display": "that worked but started claude in interactive mode",
          "pastedContents": {}
        },
        {
          "display": "says this zsh:1: command not found: yolo\nPress enter to close...\n",
          "pastedContents": {}
        },
        {
          "display": "seems like window closed as soon as it started. maybe leave it open so i can see?",
          "pastedContents": {}
        },
        {
          "display": "no, start the new widnow first with tmux and zsh otherwise it'll do it in the current process",
          "pastedContents": {}
        },
        {
          "display": "you can run claude with -p i believe to run in non-interactive mode",
          "pastedContents": {}
        },
        {
          "display": "the enter just created a new line",
          "pastedContents": {}
        },
        {
          "display": "when we switched to the window, it showed up with this output: \\\n\\\nThe default interactive shell is now zsh.\nTo update your account to use zsh, please run `chsh -s /bin/zsh`.\nFor more details, please visit https://support.apple.com/kb/HT208050.\nbash-3.2$ yolo test-cli-spawn\nbash: yolo: command not found\nbash-3.2$ pwd\n/Volumes/ExtremeSSD/PersonalAgents/PersonalAgents\nbash-3.2$\n\\\nseemed to create a new window in the same tmux session",
          "pastedContents": {}
        },
        {
          "display": "let's test it first to make sure it will work as we think before updating task mode",
          "pastedContents": {}
        },
        {
          "display": "i want to add instructions in task mode that do all of that automatically when spawning a dev mode workflow inside it. task mode workflow should keep running and stay paused until it's done. what's the easiest way to do this?",
          "pastedContents": {}
        },
        {
          "display": "no just spawn a new agent that builds a cli tool, don't do any research",
          "pastedContents": {}
        },
        {
          "display": "ok let's test it with a sample task mode workflow that spawns a dev mode from inside it",
          "pastedContents": {}
        },
        {
          "display": "i think spawning a new agent uses the same process in claude code, so it'll conflict with existing project. i think we can start a new process with claude -p command. or in our case, with the \"yolo\" alias. first verify if it uses the same process, if it does, do some research on the -p command. start a new agent now to verify",
          "pastedContents": {}
        },
        {
          "display": "@docs/tmux-claude-logging-migration.md when using the @cli_tools/workflow-cli/workflows/task-mode.yaml workflow, i want it to be able to call the @cli_tools/workflow-cli/workflows/dev-mode.yaml workflow from inside it if it needs to build a tool. what's the best way to do that such that it starts an entirely separate dev mode workflow without affecting the current task mode workflow? task mode should wait until it's complete before proceeding. ",
          "pastedContents": {}
        },
        {
          "display": "/clear ",
          "pastedContents": {}
        }
      ],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": false,
      "projectOnboardingSeenCount": 3,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "exampleFiles": [
        "screen-monitor.js",
        "workflow-cli.py",
        "index.js",
        "session-server.js",
        "categorize_db_transactions.py"
      ],
      "exampleFilesGeneratedAt": 1751485459866,
      "lastTotalWebSearchRequests": 0
    },
    "/Volumes/ExtremeSSD/PersonalAgents/PersonalAgents/worktrees/test-cli-spawn-20250702": {
      "allowedTools": [],
      "history": [],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": false,
      "projectOnboardingSeenCount": 2,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "exampleFiles": [
        "screen-monitor.js",
        "workflow-cli.py",
        "index.js",
        "session-server.js",
        "categorize_db_transactions.py"
      ],
      "exampleFilesGeneratedAt": 1751486281528,
      "lastTotalWebSearchRequests": 0,
      "lastCost": 0,
      "lastAPIDuration": 0,
      "lastDuration": 35556,
      "lastLinesAdded": 0,
      "lastLinesRemoved": 0,
      "lastTotalInputTokens": 0,
      "lastTotalOutputTokens": 0,
      "lastTotalCacheCreationInputTokens": 0,
      "lastTotalCacheReadInputTokens": 0,
      "lastSessionId": "f1ab4e7d-6aec-4ee6-9f4c-8fdbccda5a37"
    },
    "/Volumes/ExtremeSSD/PersonalAgents/PersonalAgents/worktrees/test-cli-v2-20250702": {
      "allowedTools": [],
      "history": [],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": false,
      "projectOnboardingSeenCount": 0,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "exampleFiles": [
        "screen-monitor.js",
        "workflow-cli.py",
        "index.js",
        "session-server.js",
        "categorize_db_transactions.py"
      ],
      "exampleFilesGeneratedAt": 1751486698560
    },
    "/Volumes/ExtremeSSD/PersonalAgents/PersonalAgents/worktrees/test-cli-v3-20250702": {
      "allowedTools": [],
      "history": [],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": false,
      "projectOnboardingSeenCount": 0,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "exampleFiles": [
        "screen-monitor.js",
        "workflow-cli.py",
        "index.js",
        "session-server.js",
        "categorize_db_transactions.py"
      ],
      "exampleFilesGeneratedAt": 1751486897395
    },
    "/Volumes/ExtremeSSD/PersonalAgents/PersonalAgents/worktrees/sample-tool-20250702": {
      "allowedTools": [],
      "history": [],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": false,
      "projectOnboardingSeenCount": 1,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "exampleFiles": [
        "screen-monitor.js",
        "workflow-cli.py",
        "index.js",
        "session-server.js",
        "categorize_db_transactions.py"
      ],
      "exampleFilesGeneratedAt": 1751486986493,
      "lastCost": 0.00046960000000000003,
      "lastAPIDuration": 1626,
      "lastDuration": 621053,
      "lastLinesAdded": 0,
      "lastLinesRemoved": 0,
      "lastTotalInputTokens": 417,
      "lastTotalOutputTokens": 34,
      "lastTotalCacheCreationInputTokens": 0,
      "lastTotalCacheReadInputTokens": 0,
      "lastTotalWebSearchRequests": 0,
      "lastSessionId": "be04beb5-ef4f-48b1-846b-e419c226b768"
    },
    "/Volumes/ExtremeSSD/PersonalAgents/PersonalAgents/worktrees/sample-tool-v2-20250702": {
      "allowedTools": [],
      "history": [],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": false,
      "projectOnboardingSeenCount": 1,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "exampleFiles": [
        "screen-monitor.js",
        "workflow-cli.py",
        "index.js",
        "session-server.js",
        "categorize_db_transactions.py"
      ],
      "exampleFilesGeneratedAt": 1751487084273,
      "lastCost": 0.00046960000000000003,
      "lastAPIDuration": 3162,
      "lastDuration": 546417,
      "lastLinesAdded": 0,
      "lastLinesRemoved": 0,
      "lastTotalInputTokens": 417,
      "lastTotalOutputTokens": 34,
      "lastTotalCacheCreationInputTokens": 0,
      "lastTotalCacheReadInputTokens": 0,
      "lastTotalWebSearchRequests": 0,
      "lastSessionId": "27b1e672-6173-4aef-9e4a-d37a3214aa7a"
    },
    "/Volumes/ExtremeSSD/PersonalAgents/PersonalAgents/worktrees/test-auto-cli-20250702": {
      "allowedTools": [],
      "history": [],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": false,
      "projectOnboardingSeenCount": 1,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "exampleFiles": [
        "screen-monitor.js",
        "workflow-cli.py",
        "index.js",
        "session-server.js",
        "categorize_db_transactions.py"
      ],
      "exampleFilesGeneratedAt": 1751487149414,
      "lastCost": 0.0006752,
      "lastAPIDuration": 3033,
      "lastDuration": 458323,
      "lastLinesAdded": 0,
      "lastLinesRemoved": 0,
      "lastTotalInputTokens": 639,
      "lastTotalOutputTokens": 41,
      "lastTotalCacheCreationInputTokens": 0,
      "lastTotalCacheReadInputTokens": 0,
      "lastTotalWebSearchRequests": 0,
      "lastSessionId": "c021b8f3-c47d-46de-ac5b-e59969894479"
    },
    "/Volumes/ExtremeSSD/PersonalAgents/PersonalAgents/worktrees/final-test-cli-20250702": {
      "allowedTools": [],
      "history": [
        {
          "display": "workflow-cli --project final-test-cli --mode dev --step 1",
          "pastedContents": {}
        }
      ],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": false,
      "projectOnboardingSeenCount": 1,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "exampleFiles": [
        "screen-monitor.js",
        "workflow-cli.py",
        "index.js",
        "session-server.js",
        "categorize_db_transactions.py"
      ],
      "exampleFilesGeneratedAt": 1751487318301,
      "lastCost": 0.33046274999999997,
      "lastAPIDuration": 18070,
      "lastDuration": 310507,
      "lastLinesAdded": 0,
      "lastLinesRemoved": 0,
      "lastTotalInputTokens": 2696,
      "lastTotalOutputTokens": 294,
      "lastTotalCacheCreationInputTokens": 15495,
      "lastTotalCacheReadInputTokens": 14355,
      "lastTotalWebSearchRequests": 0,
      "lastSessionId": "bbd9524f-abd5-476b-868e-8784dda859e7"
    },
    "/Volumes/ExtremeSSD/PersonalAgents/PersonalAgents/worktrees/sample-cli-20250702": {
      "allowedTools": [],
      "history": [
        {
          "display": "but why? check task mode and dev mode yaml files. doesn't it correctly instruct to create the symlink?",
          "pastedContents": {}
        },
        {
          "display": "wait, shouldn't that be pointing to the same cli_tools since we created a symlink to cli_tools earlier. \\\n\\\nalso, stop ai monitor",
          "pastedContents": {}
        },
        {
          "display": "wait, shouldn't that be pointing tai-monitor: ```json\n\"\"\n```o ",
          "pastedContents": {}
        },
        {
          "display": "actually forget the cli changes, let's just make changes to dev mode and task mode. but use ~/PersonalAgents as the root directory instead of doing it inside this worktree",
          "pastedContents": {}
        },
        {
          "display": "set workflow to merge step",
          "pastedContents": {}
        },
        {
          "display": "it should run the commands without needing to cd. update @cli_tools/workflow-cli/workflows/dev-mode.yaml and @cli_tools/workflow-cli/workflows/task-mode.yaml finish steps",
          "pastedContents": {}
        },
        {
          "display": "jump to workflow-cli finish step",
          "pastedContents": {}
        },
        {
          "display": "start devmode with task: 'create a CLI tool that generates random sample data in JSON format'",
          "pastedContents": {}
        }
      ],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": false,
      "projectOnboardingSeenCount": 2,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "exampleFiles": [
        "screen-monitor.js",
        "workflow-cli.py",
        "index.js",
        "session-server.js",
        "categorize_db_transactions.py"
      ],
      "exampleFilesGeneratedAt": 1751487655895,
      "lastCost": 7.208588700000006,
      "lastAPIDuration": 999814,
      "lastDuration": 1304857,
      "lastLinesAdded": 84,
      "lastLinesRemoved": 11,
      "lastTotalInputTokens": 75191,
      "lastTotalOutputTokens": 19499,
      "lastTotalCacheCreationInputTokens": 139246,
      "lastTotalCacheReadInputTokens": 2160050,
      "lastTotalWebSearchRequests": 2,
      "lastSessionId": "67bc1262-3b2b-4abe-8afc-c66295a7be8e"
    }
  }
}