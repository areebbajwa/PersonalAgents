{
  "numStartups": 143,
  "installMethod": "local",
  "autoUpdates": true,
  "theme": "dark-ansi",
  "tipsHistory": {
    "ide-hotkey": 81,
    "new-user-warmup": 5,
    "shift-enter": 137,
    "memory-command": 38,
    "theme-command": 131,
    "prompt-queue": 44,
    "enter-to-steer-in-relatime": 135,
    "todo-list": 136,
    "# for memory": 139,
    "install-github-app": 143,
    "permissions": 130,
    "drag-and-drop-images": 124,
    "double-esc": 140,
    "continue": 125,
    "custom-commands": 115,
    "shift-tab": 127,
    "git-worktrees": 84,
    "vscode-command-install": 123
  },
  "memoryUsageCount": 3,
  "promptQueueUseCount": 211,
  "mcpServers": {},
  "userID": "96200396462dc1a54dcd7bf4ed2806506483ec7ffab4ccd45f138f1896711cd6",
  "fallbackAvailableWarningThreshold": 0.5,
  "firstStartTime": "2025-06-24T18:12:23.289Z",
  "oauthAccount": {
    "accountUuid": "a9ecdc64-7ff6-4fd5-bec8-b13d6be1305c",
    "emailAddress": "areebb@gmail.com",
    "organizationUuid": "6bf9b879-e06c-4736-885f-392714701df8",
    "organizationRole": "admin",
    "workspaceRole": null,
    "organizationName": "Areeb Bajwa"
  },
  "shiftEnterKeyBindingInstalled": true,
  "hasCompletedOnboarding": true,
  "lastOnboardingVersion": "1.0.33",
  "bypassPermissionsModeAccepted": true,
  "subscriptionNoticeCount": 0,
  "hasAvailableSubscription": false,
  "cachedChangelog": "# Changelog\n\n## 1.0.43\n\n- Fixed a bug where the theme selector was saving excessively\n\n## 1.0.42\n\n- Added tilde (`~`) expansion support to `/add-dir` command\n\n## 1.0.41\n\n- Hooks: Split Stop hook triggering into Stop and SubagentStop\n- Hooks: Enabled optional timeout configuration for each command\n- Hooks: Added \"hook_event_name\" to hook input\n- Fixed a bug where MCP tools would display twice in tool list\n- New tool parameters JSON for Bash tool in `tool_decision` event\n\n## 1.0.40\n\n- Fixed a bug causing API connection errors with UNABLE_TO_GET_ISSUER_CERT_LOCALLY if `NODE_EXTRA_CA_CERTS` was set\n\n## 1.0.39\n\n- New Active Time metric in OpenTelemetry logging\n\n## 1.0.38\n\n- Released hooks. Special thanks to community input in https://github.com/anthropics/claude-code/issues/712. Docs: https://docs.anthropic.com/en/docs/claude-code/hooks\n\n## 1.0.37\n\n- Remove ability to set `Proxy-Authorization` header via ANTHROPIC_AUTH_TOKEN or apiKeyHelper\n\n## 1.0.36\n\n- Web search now takes today's date into context\n- Fixed a bug where stdio MCP servers were not terminating properly on exit\n\n## 1.0.35\n\n- Added support for MCP OAuth Authorization Server discovery\n\n## 1.0.34\n\n- Fixed a memory leak causing a MaxListenersExceededWarning message to appear\n\n## 1.0.33\n\n- Improved logging functionality with session ID support\n- Added undo functionality (Ctrl+Z and vim 'u' command)\n- Improvements to plan mode\n\n## 1.0.32\n\n- Updated loopback config for litellm\n- Added forceLoginMethod setting to bypass login selection screen\n\n## 1.0.31\n\n- Fixed a bug where ~/.claude.json would get reset when file contained invalid JSON\n\n## 1.0.30\n\n- Custom slash commands: Run bash output, @-mention files, enable thinking with thinking keywords\n- Improved file path autocomplete with filename matching\n- Added timestamps in Ctrl-r mode and fixed Ctrl-c handling\n- Enhanced jq regex support for complex filters with pipes and select\n\n## 1.0.29\n\n- Improved CJK character support in cursor navigation and rendering\n\n## 1.0.28\n\n- Slash commands: Fix selector display during history navigation\n- Resizes images before upload to prevent API size limit errors\n- Added XDG_CONFIG_HOME support to configuration directory\n- Performance optimizations for memory usage\n- New attributes (terminal.type, language) in OpenTelemetry logging\n\n## 1.0.27\n\n- Streamable HTTP MCP servers are now supported\n- Remote MCP servers (SSE and HTTP) now support OAuth\n- MCP resources can now be @-mentioned\n- /resume slash command to switch conversations within Claude Code\n\n## 1.0.25\n\n- Slash commands: moved \"project\" and \"user\" prefixes to descriptions\n- Slash commands: improved reliability for command discovery\n- Improved support for Ghostty\n- Improved web search reliability\n\n## 1.0.24\n\n- Improved /mcp output\n- Fixed a bug where settings arrays got overwritten instead of merged\n\n## 1.0.23\n\n- Released TypeScript SDK: import @anthropic-ai/claude-code to get started\n- Released Python SDK: pip install claude-code-sdk to get started\n\n## 1.0.22\n\n- SDK: Renamed `total_cost` to `total_cost_usd`\n\n## 1.0.21\n\n- Improved editing of files with tab-based indentation\n- Fix for tool_use without matching tool_result errors\n- Fixed a bug where stdio MCP server processes would linger after quitting Claude Code\n\n## 1.0.18\n\n- Added --add-dir CLI argument for specifying additional working directories\n- Added streaming input support without require -p flag\n- Improved startup performance and session storage performance\n- Added CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR environment variable to freeze working directory for bash commands\n- Added detailed MCP server tools display (/mcp)\n- MCP authentication and permission improvements\n- Added auto-reconnection for MCP SSE connections on disconnect\n- Fixed issue where pasted content was lost when dialogs appeared\n\n## 1.0.17\n\n- We now emit messages from sub-tasks in -p mode (look for the parent_tool_use_id property)\n- Fixed crashes when the VS Code diff tool is invoked multiple times quickly\n- MCP server list UI improvements\n- Update Claude Code process title to display \"claude\" instead of \"node\"\n\n## 1.0.11\n\n- Claude Code can now also be used with a Claude Pro subscription\n- Added /upgrade for smoother switching to Claude Max plans\n- Improved UI for authentication from API keys and Bedrock/Vertex/external auth tokens\n- Improved shell configuration error handling\n- Improved todo list handling during compaction\n\n## 1.0.10\n\n- Added markdown table support\n- Improved streaming performance\n\n## 1.0.8\n\n- Fixed Vertex AI region fallback when using CLOUD_ML_REGION\n- Increased default otel interval from 1s -> 5s\n- Fixed edge cases where MCP_TIMEOUT and MCP_TOOL_TIMEOUT weren't being respected\n- Fixed a regression where search tools unnecessarily asked for permissions\n- Added support for triggering thinking non-English languages\n- Improved compacting UI\n\n## 1.0.7\n\n- Renamed /allowed-tools -> /permissions\n- Migrated allowedTools and ignorePatterns from .claude.json -> settings.json\n- Deprecated claude config commands in favor of editing settings.json\n- Fixed a bug where --dangerously-skip-permissions sometimes didn't work in --print mode\n- Improved error handling for /install-github-app\n- Bugfixes, UI polish, and tool reliability improvements\n\n## 1.0.6\n\n- Improved edit reliability for tab-indented files\n- Respect CLAUDE_CONFIG_DIR everywhere\n- Reduced unnecessary tool permission prompts\n- Added support for symlinks in @file typeahead\n- Bugfixes, UI polish, and tool reliability improvements\n\n## 1.0.4\n\n- Fixed a bug where MCP tool errors weren't being parsed correctly\n\n## 1.0.1\n\n- Added `DISABLE_INTERLEAVED_THINKING` to give users the option to opt out of interleaved thinking.\n- Improved model references to show provider-specific names (Sonnet 3.7 for Bedrock, Sonnet 4 for Console)\n- Updated documentation links and OAuth process descriptions\n\n## 1.0.0\n\n- Claude Code is now generally available\n- Introducing Sonnet 4 and Opus 4 models\n\n## 0.2.125\n\n- Breaking change: Bedrock ARN passed to `ANTHROPIC_MODEL` or `ANTHROPIC_SMALL_FAST_MODEL` should no longer contain an escaped slash (specify `/` instead of `%2F`)\n- Removed `DEBUG=true` in favor of `ANTHROPIC_LOG=debug`, to log all requests\n\n## 0.2.117\n\n- Breaking change: --print JSON output now returns nested message objects, for forwards-compatibility as we introduce new metadata fields\n- Introduced settings.cleanupPeriodDays\n- Introduced CLAUDE_CODE_API_KEY_HELPER_TTL_MS env var\n- Introduced --debug mode\n\n## 0.2.108\n\n- You can now send messages to Claude while it works to steer Claude in real-time\n- Introduced BASH_DEFAULT_TIMEOUT_MS and BASH_MAX_TIMEOUT_MS env vars\n- Fixed a bug where thinking was not working in -p mode\n- Fixed a regression in /cost reporting\n- Deprecated MCP wizard interface in favor of other MCP commands\n- Lots of other bugfixes and improvements\n\n## 0.2.107\n\n- CLAUDE.md files can now import other files. Add @path/to/file.md to ./CLAUDE.md to load additional files on launch\n\n## 0.2.106\n\n- MCP SSE server configs can now specify custom headers\n- Fixed a bug where MCP permission prompt didn't always show correctly\n\n## 0.2.105\n\n- Claude can now search the web\n- Moved system & account status to /status\n- Added word movement keybindings for Vim\n- Improved latency for startup, todo tool, and file edits\n\n## 0.2.102\n\n- Improved thinking triggering reliability\n- Improved @mention reliability for images and folders\n- You can now paste multiple large chunks into one prompt\n\n## 0.2.100\n\n- Fixed a crash caused by a stack overflow error\n- Made db storage optional; missing db support disables --continue and --resume\n\n## 0.2.98\n\n- Fixed an issue where auto-compact was running twice\n\n## 0.2.96\n\n- Claude Code can now also be used with a Claude Max subscription (https://claude.ai/upgrade)\n\n## 0.2.93\n\n- Resume conversations from where you left off from with \"claude --continue\" and \"claude --resume\"\n- Claude now has access to a Todo list that helps it stay on track and be more organized\n\n## 0.2.82\n\n- Added support for --disallowedTools\n- Renamed tools for consistency: LSTool -> LS, View -> Read, etc.\n\n## 0.2.75\n\n- Hit Enter to queue up additional messages while Claude is working\n- Drag in or copy/paste image files directly into the prompt\n- @-mention files to directly add them to context\n- Run one-off MCP servers with `claude --mcp-config <path-to-file>`\n- Improved performance for filename auto-complete\n\n## 0.2.74\n\n- Added support for refreshing dynamically generated API keys (via apiKeyHelper), with a 5 minute TTL\n- Task tool can now perform writes and run bash commands\n\n## 0.2.72\n\n- Updated spinner to indicate tokens loaded and tool usage\n\n## 0.2.70\n\n- Network commands like curl are now available for Claude to use\n- Claude can now run multiple web queries in parallel\n- Pressing ESC once immediately interrupts Claude in Auto-accept mode\n\n## 0.2.69\n\n- Fixed UI glitches with improved Select component behavior\n- Enhanced terminal output display with better text truncation logic\n\n## 0.2.67\n\n- Shared project permission rules can be saved in .claude/settings.json\n\n## 0.2.66\n\n- Print mode (-p) now supports streaming output via --output-format=stream-json\n- Fixed issue where pasting could trigger memory or bash mode unexpectedly\n\n## 0.2.63\n\n- Fixed an issue where MCP tools were loaded twice, which caused tool call errors\n\n## 0.2.61\n\n- Navigate menus with vim-style keys (j/k) or bash/emacs shortcuts (Ctrl+n/p) for faster interaction\n- Enhanced image detection for more reliable clipboard paste functionality\n- Fixed an issue where ESC key could crash the conversation history selector\n\n## 0.2.59\n\n- Copy+paste images directly into your prompt\n- Improved progress indicators for bash and fetch tools\n- Bugfixes for non-interactive mode (-p)\n\n## 0.2.54\n\n- Quickly add to Memory by starting your message with '#'\n- Press ctrl+r to see full output for long tool results\n- Added support for MCP SSE transport\n\n## 0.2.53\n\n- New web fetch tool lets Claude view URLs that you paste in\n- Fixed a bug with JPEG detection\n\n## 0.2.50\n\n- New MCP \"project\" scope now allows you to add MCP servers to .mcp.json files and commit them to your repository\n\n## 0.2.49\n\n- Previous MCP server scopes have been renamed: previous \"project\" scope is now \"local\" and \"global\" scope is now \"user\"\n\n## 0.2.47\n\n- Press Tab to auto-complete file and folder names\n- Press Shift + Tab to toggle auto-accept for file edits\n- Automatic conversation compaction for infinite conversation length (toggle with /config)\n\n## 0.2.44\n\n- Ask Claude to make a plan with thinking mode: just say 'think' or 'think harder' or even 'ultrathink'\n\n## 0.2.41\n\n- MCP server startup timeout can now be configured via MCP_TIMEOUT environment variable\n- MCP server startup no longer blocks the app from starting up\n\n## 0.2.37\n\n- New /release-notes command lets you view release notes at any time\n- `claude config add/remove` commands now accept multiple values separated by commas or spaces\n\n## 0.2.36\n\n- Import MCP servers from Claude Desktop with `claude mcp add-from-claude-desktop`\n- Add MCP servers as JSON strings with `claude mcp add-json <n> <json>`\n\n## 0.2.34\n\n- Vim bindings for text input - enable with /vim or /config\n\n## 0.2.32\n\n- Interactive MCP setup wizard: Run \"claude mcp add\" to add MCP servers with a step-by-step interface\n- Fix for some PersistentShell issues\n\n## 0.2.31\n\n- Custom slash commands: Markdown files in .claude/commands/ directories now appear as custom slash commands to insert prompts into your conversation\n- MCP debug mode: Run with --mcp-debug flag to get more information about MCP server errors\n\n## 0.2.30\n\n- Added ANSI color theme for better terminal compatibility\n- Fixed issue where slash command arguments weren't being sent properly\n- (Mac-only) API keys are now stored in macOS Keychain\n\n## 0.2.26\n\n- New /approved-tools command for managing tool permissions\n- Word-level diff display for improved code readability\n- Fuzzy matching for slash commands\n\n## 0.2.21\n\n- Fuzzy matching for /commands\n",
  "changelogLastFetched": 1751581592018,
  "lastReleaseNotesSeen": "1.0.43",
  "hasUsedBackslashReturn": true,
  "projects": {
    "/Volumes/ExtremeSSD/PersonalAgents/PersonalAgents": {
      "allowedTools": [],
      "history": [
        {
          "display": "cli_tools should be served from the symlink ~/PersonalAgents",
          "pastedContents": {}
        },
        {
          "display": "double check both yaml files again and make sure nothing outdated is left",
          "pastedContents": {}
        },
        {
          "display": "maybe selenium-cli is not a good name for this anymore. let's call it browser-cli and update all references",
          "pastedContents": {}
        },
        {
          "display": "keep only the essential files and then commit and push",
          "pastedContents": {}
        },
        {
          "display": "don't delete the selenium playwright selector worktree. that's in progress",
          "pastedContents": {}
        },
        {
          "display": "no, consolidate, i don't want any old tools that have been replaced now with workflow",
          "pastedContents": {}
        },
        {
          "display": "run --remind-rules",
          "pastedContents": {}
        },
        {
          "display": "run --next",
          "pastedContents": {}
        },
        {
          "display": "update any outdated docs/remove unnecessary tools/code",
          "pastedContents": {}
        },
        {
          "display": "run the --next command from workflow-cli since this workflow was started with that",
          "pastedContents": {}
        },
        {
          "display": "run remind-rules",
          "pastedContents": {}
        },
        {
          "display": "run --remind-rules",
          "pastedContents": {}
        },
        {
          "display": "that's not the full rules. see how workflow-cli had the --remind-rules command. also it seems like the yaml files need updating",
          "pastedContents": {}
        },
        {
          "display": "run --remind-rules",
          "pastedContents": {}
        },
        {
          "display": "no it's not that. something to do with firefox sessions",
          "pastedContents": {}
        },
        {
          "display": "keeps creating new browser sessions each time. we've already dealt with an issue like this before. see previous todo's",
          "pastedContents": {}
        },
        {
          "display": "git shows lots of log files that are empty",
          "pastedContents": {}
        },
        {
          "display": "what's the failing test?",
          "pastedContents": {}
        },
        {
          "display": "actually, let's use any libraries that will simplify it for us. make sure they're popular. updatetodo",
          "pastedContents": {}
        },
        {
          "display": "run the loop in the background",
          "pastedContents": {}
        },
        {
          "display": "go ahead. update the yaml files as needed and move them into the new location",
          "pastedContents": {}
        },
        {
          "display": "run --remind-rules",
          "pastedContents": {}
        },
        {
          "display": "does it still read from the same dev mode and task mode yaml files?",
          "pastedContents": {}
        },
        {
          "display": "update @cursor-rules/CLAUDE.md ",
          "pastedContents": {}
        },
        {
          "display": "run the stop all monitors command on loop with sleep 60",
          "pastedContents": {}
        },
        {
          "display": "/clear ",
          "pastedContents": {}
        },
        {
          "display": "run --remind-rules",
          "pastedContents": {}
        },
        {
          "display": "/exit ",
          "pastedContents": {}
        },
        {
          "display": "go ahead",
          "pastedContents": {}
        },
        {
          "display": "run workflow-cli --project selenium_playwright_selectors --mode dev --step 1 --task \"Implement Playwright-style selectors for selenium-cli tool as specified in /Volumes/ExtremeSSD/PersonalAgents/PersonalAgents/tasks/selenium_cli_playwright_selectors_task.md\" --spawned",
          "pastedContents": {}
        },
        {
          "display": "spawn a new devmode task for this. write these task details to a file and pass a reference as the task ",
          "pastedContents": {}
        },
        {
          "display": "yes please",
          "pastedContents": {}
        },
        {
          "display": "i want to be able to see the terminal output in action and intervene as necessary, that's why we started with tmux. can we do that a simpler way?",
          "pastedContents": {}
        },
        {
          "display": "can we add the simplicity of playwright selectors to selenium? how?",
          "pastedContents": {}
        },
        {
          "display": "what are the advantages of selenium?",
          "pastedContents": {}
        },
        {
          "display": "what about if we used aria selectors? is that playwright? explain",
          "pastedContents": {}
        },
        {
          "display": "go ahead",
          "pastedContents": {}
        },
        {
          "display": "run workflow-cli --project workflow-simplification --mode dev --step 1 --task \"Implement unified workflow system to simplify spawn-cli, workflow-cli, and ai-monitor-cli integration with single state management, consistent paths, and unified CLI\" --spawned",
          "pastedContents": {}
        },
        {
          "display": "go ahead. spawn a new devmode task for this",
          "pastedContents": {}
        },
        {
          "display": "/exit ",
          "pastedContents": {}
        },
        {
          "display": "can we simplify even further?",
          "pastedContents": {}
        },
        {
          "display": "ai-monitor: run workflow-cli --remind-rules --project test-monitor-task --mode task",
          "pastedContents": {}
        },
        {
          "display": "so the overall workflow is this: i spawn a new devmode task with spawn-cli, that creates a new tmux session and runs the yolo command which then runs a workflow-cli command with the --spawned flag. that creates a state file as well as jsonl for claude to read. that gets passed to ai-monitor-cli for monitoring which uses all of that to create a prompt for gemini and send the guidance in the response back to the tmux session running that workflow. some paths are absolute (symlinked ~/PersonalAgents) for cli_tools and todos, other paths are relative. it's all quite complex and creates lots of confusion and room for bugs. investigate the current setup and suggest how best we can simplify this so it still does what it currently does.",
          "pastedContents": {}
        },
        {
          "display": "but the log file should still be created?",
          "pastedContents": {}
        },
        {
          "display": "ai-monitor: run workflow-cli --remind-rules --project test-monitor-task --mode task",
          "pastedContents": {}
        },
        {
          "display": "ok so run the --once command for this project now",
          "pastedContents": {}
        },
        {
          "display": "run it as a command! it's a global command",
          "pastedContents": {}
        },
        {
          "display": "run ai-monitor-cli monitor-all command and redirect output",
          "pastedContents": {}
        },
        {
          "display": "seems to be showing up in the ai-monitor monitor-all (blocking command) though as a project being monitored",
          "pastedContents": {}
        },
        {
          "display": "check most recent .jsonl files in that directory",
          "pastedContents": {}
        },
        {
          "display": "there's no jsonl file with \"test-monitor-task\" in the name? in .claude/projects?",
          "pastedContents": {}
        },
        {
          "display": "it is running in a worktree. what are you looking for that's missing?",
          "pastedContents": {}
        },
        {
          "display": "there's a new project: test-monitor-task that was just started in ai monitor",
          "pastedContents": {}
        },
        {
          "display": "run workflow-cli --project test-monitor-task --mode task --step 1 --task \"Create a todo list with 10 separate items, each saying to write 'hello world' to a file. Then execute each todo item one by one, writing to output.txt\" --spawned",
          "pastedContents": {}
        },
        {
          "display": "spawn taskmode with a task to write hello world to a file 100 times. make sure each todo list item is separate and says to write \"hello world\". i want the task to run a long time.",
          "pastedContents": {}
        },
        {
          "display": "no that's for another project. ",
          "pastedContents": {}
        },
        {
          "display": "check ai-monitor-cli for the path",
          "pastedContents": {}
        },
        {
          "display": "/exit ",
          "pastedContents": {}
        },
        {
          "display": "run it once for the most recent ai-monitor project i wanna see",
          "pastedContents": {}
        },
        {
          "display": "no, i want 500 from end.. just mention line count before that",
          "pastedContents": {}
        },
        {
          "display": "no viewer. i want to be able to read the .log file. seems to look good. need a few changes to the prompt that gets sent to gemini: restrict tool result in terminal to the first 5 lines and show how many more lines are hidden). also restrict the number of lines that get sent to gemini to 500",
          "pastedContents": {}
        },
        {
          "display": "ai-monitor: cd /Volumes/ExtremeSSD/PersonalAgents/PersonalAgents && workflow-cli --project test-complete-fix --set-step 2",
          "pastedContents": {}
        },
        {
          "display": "start ai monitor",
          "pastedContents": {}
        },
        {
          "display": "the gemini logs that @cli_tools/ai-monitor-cli/ai-monitor-cli creates are not easy to read. the prompt especially is full of escape characters and json. make it easy to read.",
          "pastedContents": {}
        },
        {
          "display": "/clear ",
          "pastedContents": {}
        },
        {
          "display": "ai-monitor: Your current directory is incorrect. cd /Volumes/ExtremeSSD/PersonalAgents/PersonalAgents, then run 'workflow-cli --project test-complete-fix --set-step 2' to correctly create the worktree.",
          "pastedContents": {}
        },
        {
          "display": "actually i wanna see ai-monitor can send guidance to it",
          "pastedContents": {}
        },
        {
          "display": "run workflow-cli --project test-complete-fix --mode dev --step 1 --task \"Test complete AI monitor auto-start fix\" --spawned",
          "pastedContents": {}
        },
        {
          "display": "i think spawn-cli needs to add the word \"run \" before the workflow-cli command that it sends to the tmux window. seems like otherwise it's not actually treating that as a command",
          "pastedContents": {}
        },
        {
          "display": "workflow-cli --project test-state-debug --mode dev --step 1 --task \"Debug state file creation\" --spawned",
          "pastedContents": {}
        },
        {
          "display": "no. figure out why state file was not created. it's not working until the ai-monitor detects it and can send guidance to a new spawned workflow automatically. updatetodo",
          "pastedContents": {}
        },
        {
          "display": "workflow-cli --project test-tmux-fix --mode dev --step 1 --task \"Test tmux detection fix\" --spawned",
          "pastedContents": {}
        },
        {
          "display": "seems that's a blocking command again",
          "pastedContents": {}
        },
        {
          "display": "workflow-cli --project test-tmux-fix --mode dev --step 1 --task \"Test tmux detection fix\" --spawned",
          "pastedContents": {}
        },
        {
          "display": "it auto-closed right after starting",
          "pastedContents": {}
        },
        {
          "display": "i killed it already",
          "pastedContents": {}
        },
        {
          "display": "/exit ",
          "pastedContents": {}
        },
        {
          "display": "monitor-all is a blocking command",
          "pastedContents": {}
        },
        {
          "display": "workflow-cli --project test-monitor-autostart --mode dev --step 1 --task \"Test AI monitor auto-start functionality\" --spawned",
          "pastedContents": {}
        },
        {
          "display": "add to @cursor-rules/CLAUDE.md ",
          "pastedContents": {}
        },
        {
          "display": "stop all of them. there are still some running. check workflow-cli and add a --stop-all command?",
          "pastedContents": {}
        },
        {
          "display": "stop all ai monitors",
          "pastedContents": {}
        },
        {
          "display": "ai-monitor: Your current directory is incorrect because the 'cd' command failed during setup. You must fix this before proceeding. Run `ls worktrees`, then `cd worktrees/ai-monitor-autostart-fix`, then complete the remaining setup steps from the workflow.",
          "pastedContents": {}
        },
        {
          "display": "workflow-cli --project ai-monitor-autostart-fix --mode dev --step 1 --task \"Fix AI monitor auto-start functionality so it automatically detects and monitors newly spawned dev/task mode sessions like dev-selenium-cli-improvements\" --spawned",
          "pastedContents": {}
        },
        {
          "display": "why is ai-monitor not detecting this new dev-selenium-cli-improvements? ai-monitor should've started automatically. spawn devmode with this task",
          "pastedContents": {}
        },
        {
          "display": "/clear ",
          "pastedContents": {}
        },
        {
          "display": "workflow-cli --project selenium-cli-improvements --mode dev --step 1 --task \"Improve selenium-cli with better selector support, wait commands, clear command, escape/dismiss-modal functionality, and better error messages to make browser automation more reliable and user-friendly\" --spawned",
          "pastedContents": {}
        },
        {
          "display": "spawn devmode with these improvements",
          "pastedContents": {}
        },
        {
          "display": "reflect on your struggle with selenium-cli. what needs to be improved so that you don't struggle like this?",
          "pastedContents": {}
        },
        {
          "display": "no, you need to go to custom tab and enter generated lyrics. generate the lyrics by yourself. update generation guide",
          "pastedContents": {}
        },
        {
          "display": "workflow-cli --project suno_nasheed_generation_part2 --mode task --step 1 --task \"Continue generating the remaining 29 nasheeds (22-50) from the Suno nasheed generation todo list using browser automation\" --spawned",
          "pastedContents": {}
        },
        {
          "display": "spawn taskmode with the nasheed generation task. @todos/suno_nasheed_generation_part2_20250615_000300_todo.md ",
          "pastedContents": {}
        },
        {
          "display": "/clear ",
          "pastedContents": {}
        },
        {
          "display": "are you sure that's the correct way to use spawn-cli?",
          "pastedContents": {}
        },
        {
          "display": "add one line of instruction in @cursor-rules/CLAUDE.md that when i say to spawn dev/task mode with task, use spawn-cli instead of workflow-cli",
          "pastedContents": {}
        },
        {
          "display": "is there anything else that's setting some kind of json mode setting on for gemini?",
          "pastedContents": {}
        },
        {
          "display": "make sure @cli_tools/spawn-cli/spawn-cli doesn't show new tmux window in the foreground",
          "pastedContents": {}
        },
        {
          "display": "make sure @cli_tools/ai-monitor-cli/ai-monitor-cli only sends plain text guidance. i've seen it send json that's surrounded by markdown characters. as the final line in the string that's sent to gemini (after stringifying), add \"Respond as plain text, no JSON\"",
          "pastedContents": {}
        },
        {
          "display": "kill all tmux sessions",
          "pastedContents": {}
        },
        {
          "display": "/clear ",
          "pastedContents": {}
        }
      ],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": false,
      "projectOnboardingSeenCount": 7,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "exampleFiles": [
        "workflow-cli.py",
        "screen-monitor.js",
        "index.js",
        "session-server.js",
        "categorize_db_transactions.py"
      ],
      "exampleFilesGeneratedAt": 1751493253029,
      "lastTotalWebSearchRequests": 0,
      "lastCost": 5.539068899999998,
      "lastAPIDuration": 380647,
      "lastDuration": 8887957,
      "lastLinesAdded": 165,
      "lastLinesRemoved": 0,
      "lastTotalInputTokens": 8239,
      "lastTotalOutputTokens": 11331,
      "lastTotalCacheCreationInputTokens": 131080,
      "lastTotalCacheReadInputTokens": 1496181,
      "lastSessionId": "e4c882fd-00f2-46c3-8ef3-94a61beb532c"
    },
    "/Volumes/ExtremeSSD/TheNeuron/TheNeuron": {
      "allowedTools": [],
      "history": [
        {
          "display": "/exit ",
          "pastedContents": {}
        },
        {
          "display": "stop all monitors",
          "pastedContents": {}
        },
        {
          "display": "ai-monitor: run workflow-cli --remind-rules --project audio-patient-entry-20250703 --mode dev",
          "pastedContents": {}
        },
        {
          "display": "right now we have gemini audio processing but not for the entire data entry process for the patient - name address etc. change it\n    so it's used for all of it. mention that the name/address etc will be in Urdu/Punjabi so it knows how to handle the names it\n  hears better. also move the start recording button to the top of the screen. also make it so that when a new patient is entered in\n  the patient management, it auto-navigates to that patient for entry in the main screen. start devmode with this task.",
          "pastedContents": {}
        },
        {
          "display": "/clear ",
          "pastedContents": {}
        },
        {
          "display": "ai-monitor: run workflow-cli --remind-rules --project gemini-audio-patient-entry-20250703 --mode dev",
          "pastedContents": {}
        },
        {
          "display": "right now we have gemini audio processing but not for the entire data entry process for the patient - name address etc. change it\n  so it's used for all of it. mention that the name/address etc will be in Urdu/Punjabi so it knows how to handle the names it hears better. also move the start recording button to the top of the screen. also make it so that when a new patient is entered in the patient management, it auto-navigates to that patient for entry in the main screen. start devmode with this task.",
          "pastedContents": {}
        },
        {
          "display": "right now we have gemini audio processing but not for the entire data entry process for the patient - name address etc. change it\n  so it's used for all of it. mention that the name/address etc will be in Urdu/Punjabi so it knows how to handle the names it hears\n  better. also move the start recording button to the top of the screen. ",
          "pastedContents": {}
        },
        {
          "display": "/clear ",
          "pastedContents": {}
        }
      ],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": false,
      "projectOnboardingSeenCount": 8,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "exampleFiles": [
        "patient_management.js",
        "script.js",
        "import_patients_from_csv.py",
        "index.js",
        "TODO.md"
      ],
      "exampleFilesGeneratedAt": 1751515564835,
      "lastCost": 172.3722124499996,
      "lastAPIDuration": 4903537,
      "lastDuration": 51421839,
      "lastLinesAdded": 408,
      "lastLinesRemoved": 106,
      "lastTotalInputTokens": 416660,
      "lastTotalOutputTokens": 79304,
      "lastTotalCacheCreationInputTokens": 7086373,
      "lastTotalCacheReadInputTokens": 22709823,
      "lastTotalWebSearchRequests": 3,
      "lastSessionId": "74e835f7-9210-404d-a097-c5502d45135e"
    }
  }
}