{
  "numStartups": 68,
  "installMethod": "local",
  "autoUpdates": true,
  "theme": "dark-ansi",
  "tipsHistory": {
    "ide-hotkey": 61,
    "new-user-warmup": 5,
    "shift-enter": 51,
    "memory-command": 38,
    "theme-command": 49,
    "prompt-queue": 44,
    "enter-to-steer-in-relatime": 53,
    "todo-list": 54,
    "# for memory": 55,
    "install-github-app": 56,
    "permissions": 57,
    "drag-and-drop-images": 58,
    "double-esc": 59,
    "continue": 58,
    "custom-commands": 50,
    "shift-tab": 61,
    "git-worktrees": 52
  },
  "memoryUsageCount": 1,
  "promptQueueUseCount": 71,
  "mcpServers": {},
  "projects": {
    "/Volumes/ExtremeSSD/PersonalAgents/PersonalAgents": {
      "allowedTools": [],
      "history": [
        {
          "display": "why are the gemini logs not inside ai-manager-cli?",
          "pastedContents": {}
        },
        {
          "display": "/clear ",
          "pastedContents": {}
        },
        {
          "display": "check git status and clean up and commit",
          "pastedContents": {}
        },
        {
          "display": "also the gemini logs have json that's hard to read.",
          "pastedContents": {}
        },
        {
          "display": "you removed some important instructions from the instruction object",
          "pastedContents": {}
        },
        {
          "display": "responseformat seems to repeat instructions still",
          "pastedContents": {}
        },
        {
          "display": "the ai is not aware of the entire workflow. it's aware of all the global rules though. if it needs to jump to a specific workflow step, tell it explicitly which one (or --next).",
          "pastedContents": {}
        },
        {
          "display": "fix it",
          "pastedContents": {}
        },
        {
          "display": "use real command, not a test",
          "pastedContents": {}
        },
        {
          "display": "it's saved in gemini logs?",
          "pastedContents": {}
        },
        {
          "display": "test it",
          "pastedContents": {}
        },
        {
          "display": "only suggest these ideas if the AI seems extremely stuck. otherwise let it figure it out on it's own. rule violations should be more strictly enforced though.",
          "pastedContents": {}
        },
        {
          "display": "if AI seems to be stuck, suggest some ideas that haven't been tried as well as tools available that haven't been used. ",
          "pastedContents": {}
        },
        {
          "display": "put the todo content in the prompt before the response format. for response format let's just ask for instructions to be relayed back to the ai. if empty string, don't send anything",
          "pastedContents": {}
        },
        {
          "display": "send the various parts of the prompt as separate items in a JSON object",
          "pastedContents": {}
        },
        {
          "display": "generate compliance prompt is too verbose. keep the prompt extremely minimal. generally it should simply look at the YAML rules file and the terminal output + todo list and decide whether the AI needs help and to generate small instruction to help it get back on track",
          "pastedContents": {}
        },
        {
          "display": "stop manager",
          "pastedContents": {}
        },
        {
          "display": "there's stuff missing from there thats in the other claude.md",
          "pastedContents": {}
        },
        {
          "display": "put it in /Volumes/ExtremeSSD/PersonalAgents/PersonalAgents/.cursor/rules/CLAUDE.md",
          "pastedContents": {}
        },
        {
          "display": "stop monitor",
          "pastedContents": {}
        },
        {
          "display": "#add instructions for how to start and stop the ai monitor very concisely",
          "pastedContents": {}
        },
        {
          "display": "ai-monitor: Undo the last commit using `git reset --soft HEAD~1`. You must not commit with failing tests. You are in Step 2, which is for research only. Focus on the research tasks outlined in the workflow. Implementation and fixing tests will happen in Step 5.",
          "pastedContents": {}
        },
        {
          "display": "get rid of new screen output and previous context. just show the last 200 lines of terminal output. prefix any monitor feedback with \"ai-monitor: \" so that gemini as well as we know who said what. ",
          "pastedContents": {}
        },
        {
          "display": "get rid of new screen output and previous context. just show the last 200 lines workflow-cli --remind-rules --project selenium-cli-fix --mode dev",
          "pastedContents": {}
        },
        {
          "display": "tell me everything that gets sent to gemini in the prompt",
          "pastedContents": {}
        },
        {
          "display": "workflow-cli --remind-rules --project selenium-cli-fix --mode dev",
          "pastedContents": {}
        },
        {
          "display": "Undo the last commit with 'git reset --soft HEAD~1'. Then, analyze the test failures from 'npm test' and fix the code so all tests pass before attempting to commit again. Adhere to the 'sleep < 120' rule.",
          "pastedContents": {}
        },
        {
          "display": "workflow-cli --remind-rules --project selenium-cli-fix --mode dev",
          "pastedContents": {}
        },
        {
          "display": "make it output the entire prompt and response from gemini into a new file each minute. also change the 5 min reminder to 10 mins",
          "pastedContents": {}
        },
        {
          "display": "/clear ",
          "pastedContents": {}
        },
        {
          "display": "/resume 2",
          "pastedContents": {}
        },
        {
          "display": "/clear ",
          "pastedContents": {}
        },
        {
          "display": "/exit ",
          "pastedContents": {}
        },
        {
          "display": "Undo the invalid commit immediately with 'git reset --hard HEAD~1'. You are in Step 2, which is for research only. Do not implement or commit. Analyze the test failures, then use search and read tools to understand the code before attempting any fixes in Step 5.",
          "pastedContents": {}
        },
        {
          "display": "go on",
          "pastedContents": {}
        },
        {
          "display": "don't send violation detected! just give instructions to the AI as to what it needs to do",
          "pastedContents": {}
        },
        {
          "display": "keeps saying no activity recorded",
          "pastedContents": {}
        },
        {
          "display": "restart the selenium cli fix monitor",
          "pastedContents": {}
        },
        {
          "display": "for each active project i want to see the feed at the top. inactive projects can be below that",
          "pastedContents": {}
        },
        {
          "display": "no, enter key is fine",
          "pastedContents": {}
        },
        {
          "display": "no i don't want executable commands. just human readable guidance explaining how rules were violated",
          "pastedContents": {}
        },
        {
          "display": "when workflow rule violation is detected, is it sending text based on gemini's output or just the remind rules? seems it's just the remind rules command",
          "pastedContents": {}
        },
        {
          "display": "go on",
          "pastedContents": {}
        },
        {
          "display": "these commands seem to run in foreground and make everything freeze! all commands should return right away after doing what they're supposed to. ",
          "pastedContents": {}
        },
        {
          "display": "also the live monitor doesn't seem to show all the feedback that was sent.. i don't care for screen output samples. just active projects and the feedback that was sent with timestamps",
          "pastedContents": {}
        },
        {
          "display": "i started a workflow but it didn't auto start manager. create test workflows yourself to test",
          "pastedContents": {}
        },
        {
          "display": "selenium cli has confusing help and some of the commands don't seem to work properly. test and make sure it passes for non-headless firefox with default profile. help should only mention the commands that actually exist and work. start devmode workflow",
          "pastedContents": {}
        },
        {
          "display": "this screen isn't in a workflow i don't think",
          "pastedContents": {}
        },
        {
          "display": "test it",
          "pastedContents": {}
        },
        {
          "display": "i dont think the launch command is accurate for selenium-cli",
          "pastedContents": {}
        },
        {
          "display": "it should auto start it on any step if it's not currently running",
          "pastedContents": {}
        },
        {
          "display": "VIOLATION DETECTED! You committed with failing tests and exceeded the maximum sleep time. This is a critical violation. You must not implement code until Step 5. Undo the invalid commit immediately with 'git reset --hard HEAD~1'. Then, re-examine the workflow. You are in the research phase (Step 2), do not write or commit code.",
          "pastedContents": {}
        },
        {
          "display": "run in backgroundworkflow-cli --remind-rules --project openrouter-multi-model --mode dev",
          "pastedContents": {}
        },
        {
          "display": "run in background",
          "pastedContents": {}
        },
        {
          "display": "its for the project openrouter-multi-model",
          "pastedContents": {}
        },
        {
          "display": "no i want to know why it didn't auto start",
          "pastedContents": {}
        },
        {
          "display": "i have an active workflow going right now but monitor-all says no active manager processes? ",
          "pastedContents": {}
        },
        {
          "display": "run this todo list with a devmode workflow",
          "pastedContents": {}
        },
        {
          "display": "/clear ",
          "pastedContents": {}
        },
        {
          "display": "task mode too",
          "pastedContents": {}
        },
        {
          "display": "in dev mode and task mode automation tools section mention being able to use record-cli to record the screen and send it to AI for analysis if screenshots don't suffice to make sense of what's on screen. add just one line",
          "pastedContents": {}
        },
        {
          "display": "/exit ",
          "pastedContents": {}
        },
        {
          "display": "in the final dev mode step it should run the global cli tool setup command after merging to main, if we created a cli tool",
          "pastedContents": {}
        },
        {
          "display": "run global cli setup command ",
          "pastedContents": {}
        },
        {
          "display": "yes",
          "pastedContents": {}
        },
        {
          "display": "run step 6 for clean up",
          "pastedContents": {}
        },
        {
          "display": "did we merge to main",
          "pastedContents": {}
        },
        {
          "display": "ok run --next",
          "pastedContents": {}
        },
        {
          "display": "make the ai-manager detect whether the workflow is complete or waiting for user input and stop sending auto keypresses. just ask in the gemini prompt",
          "pastedContents": {}
        },
        {
          "display": "the text instruction is sent as keypresses to the appropriate screen with enter at the end?",
          "pastedContents": {}
        },
        {
          "display": "is that real gemini output or sample? i want to run the real api call",
          "pastedContents": {}
        },
        {
          "display": "show me some sample gemini output with a real sample workflow",
          "pastedContents": {}
        },
        {
          "display": "wrap the various sections in xml tags so it doesn't confuse the AI",
          "pastedContents": {}
        },
        {
          "display": "show me the full prompt, don't cut it off",
          "pastedContents": {}
        },
        {
          "display": "doesn't seem like it's sending the full dev mode and task mode yaml file. don't try to send the rules separately, just instruct it to make sure all the rules mentioned in the file are followed strictly",
          "pastedContents": {}
        },
        {
          "display": "add an ai-manager-cli monitor command that shows live output across all projects and screens",
          "pastedContents": {}
        },
        {
          "display": "where can i see ai manager logs?",
          "pastedContents": {}
        },
        {
          "display": "no no just link to the cli design tool guide",
          "pastedContents": {}
        },
        {
          "display": "change all mentions of selenium to selenium-cli. \\\nin step 4 when creating the todo list, if it's a CLI tool make sure the todo list contains steps from the cli tool design guide. /Volumes/ExtremeSSD/PersonalAgents/PersonalAgents/cli_tools/CLI_TOOL_DESIGN_GUIDE.md",
          "pastedContents": {}
        },
        {
          "display": "in step 3 of dev mode, make sure anything mentioned in non-negotiables is not violated when simplifying",
          "pastedContents": {}
        },
        {
          "display": "i shouldn't have to start and stop ai manager manually. it should start and stop with the workflow. start on step 1, clean up at the end",
          "pastedContents": {}
        },
        {
          "display": "is this implemented into workflow-cli? explain ",
          "pastedContents": {}
        },
        {
          "display": "in the final verification step make sure the non-negotiables are reviewed. ensure that all requirements are met. if not, update todo list file and go back to step 4",
          "pastedContents": {}
        },
        {
          "display": "keystrokes came through but it gave new lines instead of enter key",
          "pastedContents": {}
        },
        {
          "display": "it said \"X: stuff - one or two arguments required\" at the bottom first. the key strokes came in later. is that normal",
          "pastedContents": {}
        },
        {
          "display": "try to send some keys to the screen again ",
          "pastedContents": {}
        },
        {
          "display": "did you test the cli commands as an end-user?",
          "pastedContents": {}
        },
        {
          "display": "in workflow cli section, add an alias updatetodo that does the same thing",
          "pastedContents": {}
        },
        {
          "display": "after adding new instructions, it should resume from --step 4 in that workflow",
          "pastedContents": {}
        },
        {
          "display": "you removed the terminal command instructions",
          "pastedContents": {}
        },
        {
          "display": "why do we have a duplicate section for this in claude.md?",
          "pastedContents": {}
        },
        {
          "display": "the new section is too verbose. make it one line and add to the top of claude.md as IMPORTANT:",
          "pastedContents": {}
        },
        {
          "display": "make it a cli tool. see /Volumes/ExtremeSSD/PersonalAgents/PersonalAgents/cli_tools/CLI_TOOL_DESIGN_GUIDE.md\\\n\\\nthen integrate it into workflow-cli as needed",
          "pastedContents": {}
        },
        {
          "display": "yes it came through but the new line simply triggered a new line instead of the enter key that sends the command",
          "pastedContents": {}
        },
        {
          "display": "it didn't come through to the screen i'm on...",
          "pastedContents": {}
        },
        {
          "display": "i need to see actual keypresses coming through. make it say \"yes please merge\"",
          "pastedContents": {}
        },
        {
          "display": "did the key presses come through in the screen test?",
          "pastedContents": {}
        },
        {
          "display": "in step 4 when creating the task list for both dev mode and task mode, make sure the user's exact words are saved at the top of the todo list as non-negotiable needs. also in the todo list it should mention any relevant context that was discovered during context discovery. link to the appropriate files instead of duplicating the info. then update claude.md and add a line that says that any new requirement/feedback/instruction should be added to this non-negotiable needs section whenever the user gives new instruction during a workflow.",
          "pastedContents": {}
        },
        {
          "display": "/exit ",
          "pastedContents": {}
        },
        {
          "display": "/clear ",
          "pastedContents": {}
        }
      ],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": false,
      "projectOnboardingSeenCount": 4,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "exampleFiles": [
        "index.js",
        "categorize_db_transactions.py",
        "startup-manager.py",
        "persistent_browser_wrapper.py",
        "task-mode.mdc"
      ],
      "exampleFilesGeneratedAt": 1750788818336,
      "hasCompletedProjectOnboarding": true
    },
    "/Volumes/ExtremeSSD/Kalaam": {
      "allowedTools": [],
      "history": [
        {
          "display": "merge to origin/development",
          "pastedContents": {}
        },
        {
          "display": "which branch are we on?",
          "pastedContents": {}
        },
        {
          "display": "run --next",
          "pastedContents": {}
        },
        {
          "display": "in the e2e folder add instructions for how to run the test suite",
          "pastedContents": {}
        },
        {
          "display": "run --next",
          "pastedContents": {}
        },
        {
          "display": "the test files should not be gitignored right?",
          "pastedContents": {}
        },
        {
          "display": "lets delete old non enhanced phase files and then run --next",
          "pastedContents": {}
        },
        {
          "display": "ok i logged out run the launcher again",
          "pastedContents": {}
        },
        {
          "display": "ok forget clearState. it should just detect whether in logged in or logged out state to decide whether to start with phase 0 or phase 1",
          "pastedContents": {}
        },
        {
          "display": "do cleanState at the beginning of phase 0 to force logged out state once",
          "pastedContents": {}
        },
        {
          "display": "make it go through the whole test and onboarding process until we get to the study tab. can continue as guest instead of entering an email address",
          "pastedContents": {}
        },
        {
          "display": "actually no i want to test placement test and account creation as well",
          "pastedContents": {}
        },
        {
          "display": "i mean new devmode workflow",
          "pastedContents": {}
        },
        {
          "display": "its on sign in screen now, not in logged in state. let's add a new phase that works in logged out state and goes through the entire on boarding as per /Volumes/ExtremeSSD/Kalaam/e2e/maestro/kalaam-app-e2e-test-sequence.md. once you get through everything, you can stop and then phase 1 can take over from there. start new taskmode workflow",
          "pastedContents": {}
        },
        {
          "display": "i have logged out now manually. make sure it works with logged out state",
          "pastedContents": {}
        },
        {
          "display": "no. still logged in. i think you might be tapping it too quickly",
          "pastedContents": {}
        },
        {
          "display": "can you test it with logged out state?",
          "pastedContents": {}
        },
        {
          "display": "will it also work if we start from a logged out state?",
          "pastedContents": {}
        },
        {
          "display": "i think it worked initially because we had clearState. Maybe we need a clearState right at the beginning of phase 1 only",
          "pastedContents": {}
        },
        {
          "display": "it's in the logged in state so it's just swiping up and down the profile tab",
          "pastedContents": {}
        },
        {
          "display": "no, see screenshots. it seems to keep swiping up on study tab instead of profile tab in the first step looking for logout button",
          "pastedContents": {}
        },
        {
          "display": "run --next",
          "pastedContents": {}
        },
        {
          "display": "no! stop simplifying it! find a way to get it done",
          "pastedContents": {}
        },
        {
          "display": "now begin. call --next",
          "pastedContents": {}
        },
        {
          "display": "read the updated todo file and make the rest of the phases like 1 and 2",
          "pastedContents": {}
        },
        {
          "display": "no skip to step 4",
          "pastedContents": {}
        },
        {
          "display": "now update the todo list as per devmode workflow",
          "pastedContents": {}
        },
        {
          "display": "no delete that todo list and create a new one with learnings and only what's left. make the todo list extremely detailed based on /Volumes/ExtremeSSD/Kalaam/e2e/maestro/kalaam-app-e2e-test-sequence.md. modify things as needed based on what we've learned",
          "pastedContents": {}
        },
        {
          "display": "no just update todo list and delete anything no longer used",
          "pastedContents": {}
        },
        {
          "display": "so can we now make the phases more comprehensive based on the @kalaam-app-e2e-test-sequence.md file. update everything based on learnings, i just want comprehensive tests, no matter how you do it. ",
          "pastedContents": {}
        },
        {
          "display": "save all learnings into LEARNINGS.md and delete todos",
          "pastedContents": {}
        },
        {
          "display": "delete all unnecessary files from e2e/maestro",
          "pastedContents": {}
        },
        {
          "display": "update todo list",
          "pastedContents": {}
        },
        {
          "display": "no! follow the test gating strictly. also don't skip any phases!",
          "pastedContents": {}
        },
        {
          "display": "need to clear state to get to onboarding",
          "pastedContents": {}
        },
        {
          "display": "seems like it's not even running the test. don't you have to stop current app so the test can start?",
          "pastedContents": {}
        },
        {
          "display": "implement @kalaam-app-e2e-test-sequence.md . start a new taskmode workflow. this is a description of what needs to be done, not a todo list",
          "pastedContents": {}
        },
        {
          "display": "commit and push",
          "pastedContents": {}
        },
        {
          "display": "you deleted the scripts again",
          "pastedContents": {}
        },
        {
          "display": "looks like e2e/maestro has a sub-folder with e2e/maestro!",
          "pastedContents": {}
        },
        {
          "display": "for example /Volumes/ExtremeSSD/Kalaam/e2e/maestro/E2E_TESTING_GUIDE.md",
          "pastedContents": {}
        },
        {
          "display": "no i see many others",
          "pastedContents": {}
        },
        {
          "display": "too many md files just keep the ones i told you about",
          "pastedContents": {}
        },
        {
          "display": "clean up the e2e/maestro directory. there's too much in the root ",
          "pastedContents": {}
        },
        {
          "display": "e2e/maestro is really messy. and seems you deleted kalaam-app-e2e-test-sequence.md? i need that along with learnings.md",
          "pastedContents": {}
        },
        {
          "display": "yea don't touch those",
          "pastedContents": {}
        },
        {
          "display": "whats up with the scripts in the git changes like extract_logs.sh. what was modified there?",
          "pastedContents": {}
        },
        {
          "display": "too many unnecessary files in git that should be in gitignore",
          "pastedContents": {}
        },
        {
          "display": "don't create any new directories in the root. inside one specific e2e/maestro folder is fine",
          "pastedContents": {}
        },
        {
          "display": "recent commits by Areeb have messed up the directory structure for Kalaam and added lots of files in wrong places and messed up the directory structure. started after 928c37b1171c7d2e8507b5b14f1913b0b6460ce9. clean it up. remove temp/unnecessary files.",
          "pastedContents": {}
        }
      ],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": false,
      "projectOnboardingSeenCount": 6,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "exampleFiles": [
        "FlashCardScreen.js",
        "StudyScreen.js",
        "App.js",
        "ProfileTab.js",
        "arabic.js"
      ],
      "exampleFilesGeneratedAt": 1750789740701,
      "lastCost": 144.01469289999952,
      "lastAPIDuration": 11323296,
      "lastDuration": 92572788,
      "lastLinesAdded": 7149,
      "lastLinesRemoved": 2322,
      "lastTotalInputTokens": 685485,
      "lastTotalOutputTokens": 276711,
      "lastTotalCacheCreationInputTokens": 2455596,
      "lastTotalCacheReadInputTokens": 69224995,
      "lastSessionId": "b13f0432-35b9-40ca-861e-e374605063b2"
    },
    "/Users/areeb2": {
      "allowedTools": [],
      "history": [
        {
          "display": "/exit ",
          "pastedContents": {}
        },
        {
          "display": "where is that todo file saved?",
          "pastedContents": {}
        },
        {
          "display": "/exit ",
          "pastedContents": {}
        }
      ],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": false,
      "projectOnboardingSeenCount": 2,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "lastCost": 0.0018616000000000001,
      "lastAPIDuration": 5159,
      "lastDuration": 8740,
      "lastLinesAdded": 0,
      "lastLinesRemoved": 0,
      "lastTotalInputTokens": 2147,
      "lastTotalOutputTokens": 36,
      "lastTotalCacheCreationInputTokens": 0,
      "lastTotalCacheReadInputTokens": 0,
      "lastSessionId": "b65d751c-78e9-4575-a286-212a43d08b0b"
    }
  },
  "userID": "96200396462dc1a54dcd7bf4ed2806506483ec7ffab4ccd45f138f1896711cd6",
  "fallbackAvailableWarningThreshold": 0.5,
  "firstStartTime": "2025-06-24T18:12:23.289Z",
  "oauthAccount": {
    "accountUuid": "a9ecdc64-7ff6-4fd5-bec8-b13d6be1305c",
    "emailAddress": "areebb@gmail.com",
    "organizationUuid": "6bf9b879-e06c-4736-885f-392714701df8",
    "organizationRole": "admin",
    "workspaceRole": null,
    "organizationName": "Areeb Bajwa"
  },
  "shiftEnterKeyBindingInstalled": true,
  "hasCompletedOnboarding": true,
  "lastOnboardingVersion": "1.0.33",
  "bypassPermissionsModeAccepted": true,
  "subscriptionNoticeCount": 0,
  "hasAvailableSubscription": false,
  "cachedChangelog": "# Changelog\n\n## 1.0.35\n\n- Added support for MCP OAuth Authorization Server discovery\n\n## 1.0.34\n\n- Fixed a memory leak causing a MaxListenersExceededWarning message to appear\n\n## 1.0.33\n\n- Improved logging functionality with session ID support\n- Added undo functionality (Ctrl+Z and vim 'u' command)\n- Improvements to plan mode\n\n## 1.0.32\n\n- Updated loopback config for litellm\n- Added forceLoginMethod setting to bypass login selection screen\n\n## 1.0.31\n\n- Fixed a bug where ~/.claude.json would get reset when file contained invalid JSON\n\n## 1.0.30\n\n- Custom slash commands: Run bash output, @-mention files, enable thinking with thinking keywords\n- Improved file path autocomplete with filename matching\n- Added timestamps in Ctrl-r mode and fixed Ctrl-c handling\n- Enhanced jq regex support for complex filters with pipes and select\n\n## 1.0.29\n\n- Improved CJK character support in cursor navigation and rendering\n\n## 1.0.28\n\n- Slash commands: Fix selector display during history navigation\n- Resizes images before upload to prevent API size limit errors\n- Added XDG_CONFIG_HOME support to configuration directory\n- Performance optimizations for memory usage\n- New attributes (terminal.type, language) in OpenTelemetry logging\n\n## 1.0.27\n\n- Streamable HTTP MCP servers are now supported\n- Remote MCP servers (SSE and HTTP) now support OAuth\n- MCP resources can now be @-mentioned\n- /resume slash command to switch conversations within Claude Code\n\n## 1.0.25\n\n- Slash commands: moved \"project\" and \"user\" prefixes to descriptions\n- Slash commands: improved reliability for command discovery\n- Improved support for Ghostty\n- Improved web search reliability\n\n## 1.0.24\n\n- Improved /mcp output\n- Fixed a bug where settings arrays got overwritten instead of merged\n\n## 1.0.23\n\n- Released TypeScript SDK: import @anthropic-ai/claude-code to get started\n- Released Python SDK: pip install claude-code-sdk to get started\n\n## 1.0.22\n\n- SDK: Renamed `total_cost` to `total_cost_usd`\n\n## 1.0.21\n\n- Improved editing of files with tab-based indentation\n- Fix for tool_use without matching tool_result errors\n- Fixed a bug where stdio MCP server processes would linger after quitting Claude Code\n\n## 1.0.18\n\n- Added --add-dir CLI argument for specifying additional working directories\n- Added streaming input support without require -p flag\n- Improved startup performance and session storage performance\n- Added CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR environment variable to freeze working directory for bash commands\n- Added detailed MCP server tools display (/mcp)\n- MCP authentication and permission improvements\n- Added auto-reconnection for MCP SSE connections on disconnect\n- Fixed issue where pasted content was lost when dialogs appeared\n\n## 1.0.17\n\n- We now emit messages from sub-tasks in -p mode (look for the parent_tool_use_id property)\n- Fixed crashes when the VS Code diff tool is invoked multiple times quickly\n- MCP server list UI improvements\n- Update Claude Code process title to display \"claude\" instead of \"node\"\n\n## 1.0.11\n\n- Claude Code can now also be used with a Claude Pro subscription\n- Added /upgrade for smoother switching to Claude Max plans\n- Improved UI for authentication from API keys and Bedrock/Vertex/external auth tokens\n- Improved shell configuration error handling\n- Improved todo list handling during compaction\n\n## 1.0.10\n\n- Added markdown table support\n- Improved streaming performance\n\n## 1.0.8\n\n- Fixed Vertex AI region fallback when using CLOUD_ML_REGION\n- Increased default otel interval from 1s -> 5s\n- Fixed edge cases where MCP_TIMEOUT and MCP_TOOL_TIMEOUT weren't being respected\n- Fixed a regression where search tools unnecessarily asked for permissions\n- Added support for triggering thinking non-English languages\n- Improved compacting UI\n\n## 1.0.7\n\n- Renamed /allowed-tools -> /permissions\n- Migrated allowedTools and ignorePatterns from .claude.json -> settings.json\n- Deprecated claude config commands in favor of editing settings.json\n- Fixed a bug where --dangerously-skip-permissions sometimes didn't work in --print mode\n- Improved error handling for /install-github-app\n- Bugfixes, UI polish, and tool reliability improvements\n\n## 1.0.6\n\n- Improved edit reliability for tab-indented files\n- Respect CLAUDE_CONFIG_DIR everywhere\n- Reduced unnecessary tool permission prompts\n- Added support for symlinks in @file typeahead\n- Bugfixes, UI polish, and tool reliability improvements\n\n## 1.0.4\n\n- Fixed a bug where MCP tool errors weren't being parsed correctly\n\n## 1.0.1\n\n- Added `DISABLE_INTERLEAVED_THINKING` to give users the option to opt out of interleaved thinking.\n- Improved model references to show provider-specific names (Sonnet 3.7 for Bedrock, Sonnet 4 for Console)\n- Updated documentation links and OAuth process descriptions\n\n## 1.0.0\n\n- Claude Code is now generally available\n- Introducing Sonnet 4 and Opus 4 models\n\n## 0.2.125\n\n- Breaking change: Bedrock ARN passed to `ANTHROPIC_MODEL` or `ANTHROPIC_SMALL_FAST_MODEL` should no longer contain an escaped slash (specify `/` instead of `%2F`)\n- Removed `DEBUG=true` in favor of `ANTHROPIC_LOG=debug`, to log all requests\n\n## 0.2.117\n\n- Breaking change: --print JSON output now returns nested message objects, for forwards-compatibility as we introduce new metadata fields\n- Introduced settings.cleanupPeriodDays\n- Introduced CLAUDE_CODE_API_KEY_HELPER_TTL_MS env var\n- Introduced --debug mode\n\n## 0.2.108\n\n- You can now send messages to Claude while it works to steer Claude in real-time\n- Introduced BASH_DEFAULT_TIMEOUT_MS and BASH_MAX_TIMEOUT_MS env vars\n- Fixed a bug where thinking was not working in -p mode\n- Fixed a regression in /cost reporting\n- Deprecated MCP wizard interface in favor of other MCP commands\n- Lots of other bugfixes and improvements\n\n## 0.2.107\n\n- CLAUDE.md files can now import other files. Add @path/to/file.md to ./CLAUDE.md to load additional files on launch\n\n## 0.2.106\n\n- MCP SSE server configs can now specify custom headers\n- Fixed a bug where MCP permission prompt didn't always show correctly\n\n## 0.2.105\n\n- Claude can now search the web\n- Moved system & account status to /status\n- Added word movement keybindings for Vim\n- Improved latency for startup, todo tool, and file edits\n\n## 0.2.102\n\n- Improved thinking triggering reliability\n- Improved @mention reliability for images and folders\n- You can now paste multiple large chunks into one prompt\n\n## 0.2.100\n\n- Fixed a crash caused by a stack overflow error\n- Made db storage optional; missing db support disables --continue and --resume\n\n## 0.2.98\n\n- Fixed an issue where auto-compact was running twice\n\n## 0.2.96\n\n- Claude Code can now also be used with a Claude Max subscription (https://claude.ai/upgrade)\n\n## 0.2.93\n\n- Resume conversations from where you left off from with \"claude --continue\" and \"claude --resume\"\n- Claude now has access to a Todo list that helps it stay on track and be more organized\n\n## 0.2.82\n\n- Added support for --disallowedTools\n- Renamed tools for consistency: LSTool -> LS, View -> Read, etc.\n\n## 0.2.75\n\n- Hit Enter to queue up additional messages while Claude is working\n- Drag in or copy/paste image files directly into the prompt\n- @-mention files to directly add them to context\n- Run one-off MCP servers with `claude --mcp-config <path-to-file>`\n- Improved performance for filename auto-complete\n\n## 0.2.74\n\n- Added support for refreshing dynamically generated API keys (via apiKeyHelper), with a 5 minute TTL\n- Task tool can now perform writes and run bash commands\n\n## 0.2.72\n\n- Updated spinner to indicate tokens loaded and tool usage\n\n## 0.2.70\n\n- Network commands like curl are now available for Claude to use\n- Claude can now run multiple web queries in parallel\n- Pressing ESC once immediately interrupts Claude in Auto-accept mode\n\n## 0.2.69\n\n- Fixed UI glitches with improved Select component behavior\n- Enhanced terminal output display with better text truncation logic\n\n## 0.2.67\n\n- Shared project permission rules can be saved in .claude/settings.json\n\n## 0.2.66\n\n- Print mode (-p) now supports streaming output via --output-format=stream-json\n- Fixed issue where pasting could trigger memory or bash mode unexpectedly\n\n## 0.2.63\n\n- Fixed an issue where MCP tools were loaded twice, which caused tool call errors\n\n## 0.2.61\n\n- Navigate menus with vim-style keys (j/k) or bash/emacs shortcuts (Ctrl+n/p) for faster interaction\n- Enhanced image detection for more reliable clipboard paste functionality\n- Fixed an issue where ESC key could crash the conversation history selector\n\n## 0.2.59\n\n- Copy+paste images directly into your prompt\n- Improved progress indicators for bash and fetch tools\n- Bugfixes for non-interactive mode (-p)\n\n## 0.2.54\n\n- Quickly add to Memory by starting your message with '#'\n- Press ctrl+r to see full output for long tool results\n- Added support for MCP SSE transport\n\n## 0.2.53\n\n- New web fetch tool lets Claude view URLs that you paste in\n- Fixed a bug with JPEG detection\n\n## 0.2.50\n\n- New MCP \"project\" scope now allows you to add MCP servers to .mcp.json files and commit them to your repository\n\n## 0.2.49\n\n- Previous MCP server scopes have been renamed: previous \"project\" scope is now \"local\" and \"global\" scope is now \"user\"\n\n## 0.2.47\n\n- Press Tab to auto-complete file and folder names\n- Press Shift + Tab to toggle auto-accept for file edits\n- Automatic conversation compaction for infinite conversation length (toggle with /config)\n\n## 0.2.44\n\n- Ask Claude to make a plan with thinking mode: just say 'think' or 'think harder' or even 'ultrathink'\n\n## 0.2.41\n\n- MCP server startup timeout can now be configured via MCP_TIMEOUT environment variable\n- MCP server startup no longer blocks the app from starting up\n\n## 0.2.37\n\n- New /release-notes command lets you view release notes at any time\n- `claude config add/remove` commands now accept multiple values separated by commas or spaces\n\n## 0.2.36\n\n- Import MCP servers from Claude Desktop with `claude mcp add-from-claude-desktop`\n- Add MCP servers as JSON strings with `claude mcp add-json <n> <json>`\n\n## 0.2.34\n\n- Vim bindings for text input - enable with /vim or /config\n\n## 0.2.32\n\n- Interactive MCP setup wizard: Run \"claude mcp add\" to add MCP servers with a step-by-step interface\n- Fix for some PersistentShell issues\n\n## 0.2.31\n\n- Custom slash commands: Markdown files in .claude/commands/ directories now appear as custom slash commands to insert prompts into your conversation\n- MCP debug mode: Run with --mcp-debug flag to get more information about MCP server errors\n\n## 0.2.30\n\n- Added ANSI color theme for better terminal compatibility\n- Fixed issue where slash command arguments weren't being sent properly\n- (Mac-only) API keys are now stored in macOS Keychain\n\n## 0.2.26\n\n- New /approved-tools command for managing tool permissions\n- Word-level diff display for improved code readability\n- Fuzzy matching for slash commands\n\n## 0.2.21\n\n- Fuzzy matching for /commands\n",
  "changelogLastFetched": 1750889177080,
  "lastReleaseNotesSeen": "1.0.35",
  "hasUsedBackslashReturn": true
}